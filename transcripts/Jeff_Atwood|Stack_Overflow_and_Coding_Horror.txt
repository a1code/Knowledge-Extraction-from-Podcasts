The following is a conversation with Jeff Atwood, he is the co-founder of Stack Overflow and Stock Exchange websites that are visited by millions of people every single day. Much like with Wikipedia, it is difficult to understate the impact on global knowledge and productivity that these networks of sites have created. Jeff is also the author of the famed blog Coding Core and the founder of Discourse and Open Source Software, a project that seeks to improve the quality of our online community discussions. This conversation is part of the MIT course on artificial general intelligence and the Artificial Intelligence Podcast, if you enjoy it.
Subscribe on YouTube, iTunes or your podcast provider of choice. Or simply connect with me on Twitter at Lex Friedman spelled Frid. And now here is my conversation with Jeff Atwood. Having co created and managed for a few years, the world's largest community of programmers and stack overflow 10 years ago, what do you think? Motivates most programmers. Is it fame, fortune, glory, process of programming itself, or is it the sense of belonging to a community?
it is puzzles, really. I think it is this idea of working on puzzles independently of other people and just solving a problem, sort of like on your own, almost. Although, you know, nobody really works alone in programming anymore. But I will say there is there is an aspect of sort of hiding yourself away and just sort of beating on a problem until you solve it. Like brute force basically to me is what a lot of programming is, is like the computer so fast.
Right. You can do things that would take forever for a human, but you just do them like so many times and so often that you get the answer right.
you are saying just the pure act of tinkering with the code. Yes.
This is the thing that drives most probably the joy, the struggle, balance within the joy of overcoming the brute force process of pain and suffering that eventually leads to something that actually works well.
Data is fun to like. there is this thing called the the shuffling problem, like the naive shuffle that most programmers write has a huge flaw. And there is a lot of articles online about this because it can be really bad. If you are like a casino and you have an unsophisticated programmer writing your shuffle algorithm, there is surprising ways to get this wrong. But the neat thing is the way to figure that out is just to run your shuffle a bunch of times and see like how many orientations of card you get.
You should get an equal distribution of all the cards and with the na√Øf method of shuffling, if you just look at the data, if you just brute force and say, OK, I do not know what is going to happen, you just write a program that does it a billion times and then see what the buckets look like of the data. And the money hall problem is another example of that, where you have three doors and somebody gives you information about another door.
So the correct answer is you should always switch the money hall problem, which is not intuitive, and it freaks people out all the time. Right. But you can solve it with data.
If you write a program that does the Monty Hall, you know, game and then never switch is then always which is just compare, you would immediately see that you do not have to be smart. Right. You know, to figure out the answer algorithmically. You can just brute force it out with data, say, well, I know the answer is this because I ran the program a billion times and these are the data buckets that I got from it.
Right.
So empirically find it. But what is the joy of that? So for you, for you personally, outside of family, what motivates you in this process is?
Well, to be honest, I do not really write a lot of code anymore. Like what I do, a discourse is like managerial stuff, which I always kind of despised.
I like as a programmer, you think of managers as people who do not really do anything themselves.
But the weird thing about code is like you realize that like language is code, like the ability to direct other people let us you get more stuff done than you could by yourself.
Anyway, you said language is code language is meaning communication with other humans. Yes, you can think of it as a systematic. So what is it like to be. What makes before we get into programming, what makes a good manager, what makes a good leader? Well, I think a leader, it is all about leading by example. First of all, like sort of doing and being the things that you want to be. Now, this can be kind of exhausting, particularly have kids, because you realize that your kids are watching you like all the time, like even in ways that you have stopped seeing yourself, like the hardest person to see on the planet.
Just really yourself. Right. What do you see other people and make judgments about them but yourself, like you are super biased. You do not actually see yourself the way other people see you often. you are very, very hard on yourself in a way that other people really are not going to be.
So, you know, that is one of the insights is, you know, you have got to be really diligent about thinking like, am I behaving in a way that represents how I want other people to behave? Right. Like leading through example. there is a lot of examples of leaders that really mess this up. Right. Like they make decisions that are like, wow, that is why, you know, it is just it is a bad example for other people. So I think leading by example is one the other one, I believe is working really hard.
And I do not mean like working exhaustively, but like showing a real passion for the problem, like, you know, not necessarily your solution to the problem. But the problem itself is just one that you really believe in, like with discourse, for example.
The problem that we are looking at, which is my current project, is how do you get people in groups to communicate in a way that does not, like break down into the howling of wolves? Right. Like, how do you deal with trolling? Not like technical problems of how do not you people to post paragraphs? How do I get people to use bold how to get people to use complete sentences, although those are problems as well. But like, how do I get people to get along with each other.
Right. Like and then solve whatever problem it is they set up to solve or, you know, reach some consensus on discussion or just like not hurt each other, even like maybe it is a discussion that does not really matter. But are people like, yelling at each other? Right. And why write like that is not the purpose of this kind of communication. So I would say, you know, leadership is about, you know, setting an example, you know, doing the things that represent what you want to be and making sure that you are actually doing those things.
And there is a trick to that, too, because the things you do not do also say a lot about what you are.
Yes. So let us pause on that one. So those two things are fascinating. So how you have as a leader, is that self-awareness? You just said it is really hard to be self-aware. So for you personally or maybe for other leaders, you have seen her look up to, how do you know the both of the things you are doing are the wrong things to be doing, the way you speak to others, the way you behave and the things you are not doing.
How do you how do you get that signal?
there is two aspects that one is like processing feedback that you are getting. So how you get feedback. Well, right. Are you are you getting feedback right? Like, so one way we do it, for example, a discourse. We have three co-founders and we periodically talk about decisions before we make them. So it is not like one person can make a mistake or like, wow, that is you know, there can be misunderstandings, things like that. So it is part of like group consensus of leadership is like it is good to have, I think, systems where there is one leader and that leader has the rule of absolute law are just really dangerous in my experience for communities, for example, like if you have community run by one person, that one person makes all decisions.
That person's going to have a bad day. Something could happen to that person. You know something? You know, there is a lot of variables. So like, first, when you think about leadership, have multiple people doing leadership and have them talk amongst each other. So they are giving each other feedback about the decisions that they are making.
And then when you do get feedback, I think there is that little voice in your head, right.
Like or your gut or whatever you want to put it in your body. I think that voice is really important. Like I think most people who have any kind of moral compass or like want to do. Most people want to do the right thing. I do believe that. I mean, there might be a handful of sociopaths out there that do not. But most people, they want other people to think of them as a good person. Why would not you?
Right. Like, do you want people to despise you? I mean, that is just weird, right? So you have that little voice, that sort of the angel and devil on your shoulder sort of talking to you about like what you are doing, how you are doing, how does it make you feel to make these decisions? Right.
And I think having some attunement to that voice is important. But you said that voice also for I think there is a programmer situation, too, where sometimes the devil on the shoulder is a little a little too loud. So you are a little too self-critical for a lot of developers, and especially when you have introverted personality. How do you struggle with a self-criticism or the criticism of others? So one of the things of leadership is to do something that is potentially unpopular or people doubt you and you still go through with the decision.
So what is that balance like?
I think you have to walk people through your decision making, right? You have to this is where blogging is really important and communication is so important. Again, code language is just another kind of code is like here is the program by which I arrived at the conclusion that I am going to reach right now.
it is one thing to say, like this is a decision, its final deal with it. Right. that is not usually satisfying to people. But if you say, look, you know, we have been thinking this problem for a while. here is some stuff that is happened. here is what we think is right. here is our goals. here is we want to achieve. And we have looked at these options and we think this of the two options is the best option. People be like, oh, OK, right.
Maybe I do not totally agree with you, but I can kind of see where you are coming from.
And like, I see, it is not just arbitrary decision delivered from a cloud of flames in the sky. Right. it is like. A human trying to reach some kind of consensus about, you know, goals and their goals might be different than yours, that is completely legit, right. But if you are making that clear, it is like, oh, well, the reason we do not agree is because we have totally different goals. Right. Like, how could we agree?
it is not that you are a bad person, it is that we have radically different goals in mind. When we started looking at this problem.
And the other one you said is passion so or hard work. Sorry.
Well, those are tied together to me in my mind and say hard work and passion. Like for me, like I just really love the problem discourses setting out to solve, because in a way it is like there is a there is a vision of the world where it all devolves into Facebook basically owning everything and every aspect of human communication.
Right. And this has always been kind of a scary world for me first, because I do not I think Facebook is really good at execution.
I got to compliment them. they are very competent in terms of what they are doing. But Facebook has not much of a moral compass in terms of Facebook cares about Facebook, really. They do not really care about you and your problems. What they care about is how big they can make Facebook right.
Is you talking about the company or just the mechanism, how Facebook works?
Kind of both really like and the idea with discourse. The reason I am so passionate about it is because I believe every community should have the right to own themselves. Right. Like they should have their own software that they can run that belongs to them. that is their space where they can set the rules. And if they do not like it, they can move to different hosting or, you know, whatever they need, they need to have it can happen.
But like this this idea of a company town where all human communication is implicitly owned by WhatsApp, Instagram and Facebook. And it is really disturbing, too, because Facebook is really smart. Like I said, they are great at execution buying and WhatsApp and buying Instagram were incredibly smart decisions. And they also do this thing on, if you know. But they have this VPN software that they give away for free on smartphones and it indirectly feeds all the data about the traffic back to Facebook so they can see what is actually getting popular through the VPN.
Right. They have low level access to the network data because users have let them have that.
So they will take a small pause here. First of all, discourse, can you talk about can you lay out the land of all the different ways you can have communities? So there is stack overflow that you have built. there is discourse. Yeah. So Sackhoff is kind of like a wiki Wikipedia you talk about, and it is a very specific scalpel, very focused. So what is the purpose of discourse and maybe contrast that with Facebook. First of all, say what is discourse.
Yeah, start from the beginning. Well, let me start from the beginning. So Stack Overflow is very structured wiki style Q&A for programmers. Right. And that was the problem we first worked on when we started. We thought it was discussions because we looked at like programming forums and other things. But we quickly realized we were doing Q&A, which is a very narrow subset of human communication space.
So when you started Psychoville, you thought you did not even know the Q&A. Now, it would be you and I.
Well, we did not know we we had an idea of like, OK, these are things that we see working online. We had a goal. Right? Our goal was there was this site experts exchange with a very unfortunate.
Thank you for killing that site. Yeah, I know. Right. Like, a lot of people do not remember it anymore, which is great. Like that is the measure of success. When people do not remember the thing they were trying to replace, then you have totally won. So it was a place to get answers to programming questions, but it was not clear if it was like focused Q&A, if it was a discussion, there were plenty of programming forums. So we were not really sure.
We were like, OK, we will take aspects of Digg and Reddit like voting. we are very important reordering answers based on votes, wiki style, stuff like being able to edit post not just your post but other people's post to make them better and keep them more up to date ownership of blogging of like, OK, this is me saying, this is my voice. You know, this is the stuff that I know. And, you know, you get your reputation accrues to you and it is peer recognition.
So you asked earlier, like, what motivates programmers? I think peer recognition motivates them a lot. That was one of the key insights of stack overflow is like recognition from your peers is why things get done initially. Money, not so your boss, but like your peers saying, wow, this person really knows their stuff has a lot of value. So the reputation system came from that. So we were sort of Frankensteinian a bunch of stuff together in stack overflow of like stuff we had seen working and we knew worked and that became stack overflow.
Over time we realized it was not really discussion. It was very focused questions and answers. There was not a lot of room on the page for. Let me talk about this tangential thing. It was more like, OK, is it answering the question? Is it clarifying the question? Or could it be an alternative answer to the same question? Because there is usually more than one way to do it in program. there is like, say, five to ten ways.
And one of the patterns we got to do early on and stack overflow is there are questions where there would be like hundreds of answers.
we are like, wow, how can there be a programming question with five hundred, two hundred, five hundred answers?
And we looked at those and we realized those were not really questions in the traditional sense. They were discussions. It was stuff that we allowed early on that we eventually decided was not allowed, such as what is your favorite programming food? You know, what is the funniest programming cartoon you have seen? And we had to sort of backfill a bunch of rules about like, why is not this allowed? Such as is this a real problem you are facing? Like nobody goes to work and says, wow, I can not work because I do not know what the funniest programming cartoon is.
So sorry. Compile this code now, right, it is not a real problem you are facing in your job. That was reenroll. And the second like what can you really learn from that?
it is like what I call accidental learning or Reddit style learning where you just like to just browse some things and. Oh, wow, you know, did you know tree frogs only live three years? I mean, I just made that up. I do not know. that is true, but I did not really set out to learn that.
I do not need to know that. Right. it is an accidental learning. It was more intentional learning where like, OK, I have a problem and I want to learn about stuff around this problem having. Right.
And it could be theory. It could be compiler theory. It could be other stuff. But I am having a compiler problem. Hence I need to know the compiler theory, that aspect of it that gives me the the gets me to my answer. Right.
So kind of a directed learning sphere to backfill these rules as we sort of figured out what the heck it was we were doing. And this system came very strict over time. And a lot of people still complain about that. And I wrote my latest blog entry, What to Stack Overflow Want to be wanted to be when it grows out, celebrating the ten year anniversary. Yeah, yeah.
So ten years and that system has trended towards strictness. there is a variety of reasons for this. One is people do not like to see other people get reputation for stuff as they view they view as frivolous, which I can actually understand because if you saw a programmer got like 500 upvotes for funniest programming cartoon or funniest comment they had seen, and it is like, well, why do they have that reputation is because they wrote the joke? Probably not. I mean, if they did, maybe or the cartoon.
Right, they are getting a bunch of reputation based on someone else's work. that is not even like programming. it is just a joke. Right. it is a related opinion. So you begin to resent that. you are like, well, that is not fair. And it is not. At some level they are correct. I mean, I empathize because, like, it is not correct.
Your reputation for that versus here is a really gnarly regular expression problem and here is a really, you know, clever, insightful, you know, detailed answer laying out, oh, here is why you are seeing the behavior that you are seeing here.
Let me teach you some things about how to avoid in the future. that is that is great. Like, that is gold, right?
You want people to your reputation for that. Not so much for. Wow, look at this funny thing I saw. Right. Great.
So there is this very specific Q&A format and then take me through the journey towards discourse and Facebook and Twitter. So you start at the beginning that stack overflow evolved to have a purpose. So what is discourse, this passion you have for creating community for discussion? Where does that when was that born and how?
Part of it is based on the realization the stack overflow is only good for very specific subjects where there is sort of it is based on data, facts and science, where answers can be kind of verified to be true. Another form of that is there is the book of knowledge, like the tome of of knowledge that defines like whatever it is. You can refer to that book and I will give you the answer. There has to be it only works on subjects where there is like CIMMYT clear answers to things that can be verified in some form.
Now, again, there is always more than one way to do it. there is complete flexibility in system around that. But where it falls down is stuff like poker and Lego like we had. If you go to stock exchange dotcom, we have an engine that tries to launch different Q&A topics.
Right.
And people can propose Q&A topics, sample questions. And if he gets enough support within the network, we launch the Q&A site. So some of the ones we launch were poker and Lego and they did horribly. Right, because, I mean, there might still be there lingering on in some form, but it was an experiment. This is like a test, right, in some subjects, works super well in stack engine and some do not. But the reason Lego and poker do not work is because they are so social.
Really, it is not about, you know, what is the rule here in poker? it is like, well, you know, what kind of cigars do we like to to to smoke while playing poker or, you know, what is what is a cool set of cards to use when playing poker or you know what some strategies like, say, I have this hand come up with some strategies I could use. it is more of a discussion around like what is happening, like with Lego, you know, same thing like here is this cool Lego set I found.
Look how awesome this is not like. Yeah, that is freaking awesome, right? it is not a question. Right. there is all these social components, the discussions that do not fit at all. Like we literally have to disallow those and stack overflow because it is not about being social, it is about problems that you are facing in your work that you need concrete answers for.
Right. Like you have a real demonstrated problem that is sort of blocking you in something nobody's blocked by. You know, what should I do when I have a straight flush? Right.
Like, it is not a blocking problem in the world. it is just an opportunity to hang out and discuss. So discourse was a way to address that and say, look, you know, discussion forum software was very, very bad. And when I came out on Stack Overflow in late early twenties, early 2013 or early 2012, it was still very, very bad. I expected it improved in the four years since I last look, but it had not improved at all.
And I was like, well, that is kind of terrible because I love these communities of people talking about things that they love. You know, they are just communities of interest, right. And there is no good software for them. Like startups would come to me and say, hey, Jeff, I want to you know, I have this startup. here is my idea. And the first thing I would say to them is like, well, first, why are you asking me?
Like, I do not really know your field. Right, necessarily. Like, why are not you asking, like the community, like the people that are interested in this problem, the people that are using your product, why are you talking to them? And then they say, oh, great ideas like how do I do that? And then that is when I started playing sad trombone because I realized all the software involving. Talking to your users, customers, audience, patrons, whatever it is, it was all really bad, you know, it was like stuff that I would be embarrassed to recommend to other people.
And yet that is where I felt they could get the biggest and strongest, most effective input for what they should be doing with their product. Right. From their users, from their community. Right. that is what we did on Stack Overflow.
So what we are talking about with forms, the what is it, the dark matter of the Internet. it is still I do not know if it is still, but for the longest time, it has some of the most passionate and fascinating discussions. And what is the usual structure? there is usually what it is it is linear, so sequential to post to one after the other and there is pagination. So there is 10 posts and you go to the next page in that format still is used by like we are doing a lot of research with Tesla vehicles and there is Tesla Motors Club Forum, which is extremely, really wanted to run that actually they pinged us, but I do not think we got it.
But I really would like to go on that one. But they have started before even 2012, I believe. I mean, they have been running for a long time. it is still an extremely rich source of information. So what is broken about that system and how are you trying to fix it? I think there is a lot of power in in connecting people that love the same stuff around that specific topic, meaning Facebook's idea of connection is just any human that is related to another human right, like like through friendship or, you know, any other reason.
Facebook's idea of the world is sort of the status update. Right. Like a friend of yours did something ate at a restaurant. Right. Whereas discussion forums were only around the interest graph. Like, I love electric cars specifically. I love Tesla. Right. Like, I love the way they approach the problem. I love the style of the founder. I just love the design ethic. there is a lot to like about Tesla. If you saw the oatmeal, he did a whole love comic to Tesla and it was actually kind of cool because I learned some stuff.
He was somehow great. Tesla cars were specifically like how they were built differently. And he went into a lot of great detail. That was really interesting to me. That oatmeal post, if you read it, is the genesis of pretty much all interest communities. I just really love this stuff. Like for me it goes right. Like I am into the auto communities and there is these interest communities are just really fascinating to me. And I feel more connected to the local communities than I do to, you know, friends that I do not see that often.
Right. Like, to me, the powerful thing is the interest graph. And Facebook kind of dabbles in the interest graph.
I mean, they have groups you can sign up for, groups and stuff, but it is really about the relationship graph. Like this is my coworker, this is my relative. This is my friend, but not so much about the interest. So I think that is the linchpin of which forums and communities are built on that. I personally love like I, I like I said, leadership is about passion.
Right. And being passionate about stuff is is a really valid way to look at the world. And I think it is a way a lot of stuff in the world gets done. Like I once had someone described me as he is like, Jeff, you are a guy who you just get super passionate about a few things at a time and you just go super deep in us things.
And I was like, oh, that is kind of right. that is kind of what I do. I will get into something and just be super into that for a couple of years or whatever and just learn all I can about it and go super deep in it. And that is how I enjoy experiencing the world. Right. Like not being shallow on a bunch of things, but being really deep on a few things that I am interested in. So forums kind of unlock that right.
And you know, you do not want a world where everything belongs to Facebook. At least I do not. I want a world where communities can kind of own themselves, set their own norms, set their own rules, control the experience, because community is also about ownership. Right. Like if if you are meeting at the Barnes and Noble every Thursday and Barnes and Noble says, get out of here, you guys do not buy enough books. Well, you know, you are kind of hosed, right?
Barnes and Noble owns you, right?
Like, you can not. But if you have your own meeting space, you know your own clubhouse, you can set your own rules, decide what you want to talk about there, and just really generate a lot better information than you could like hanging out at Barnes and Noble every Thursday at three p.m.. Right. So that is kind of the vision of discourse is a place where it is fully open source. You can take the software, you can sell it anywhere.
And, you know, you and a group of people can go deep on whatever it is that you are into. And this works for startups, right? Startups are a group of people who go super deep on a specific problem. Right. And they want to talk to the communities like, well, I installed this course. Right. that is what we do. It is. that is what I did. A stack overflow. I spent a lot of time on metastatic overflow, which is our internal, well, public community feedback site and just experiencing what the users are experiencing.
Right, because they are the ones doing all the work in the system. And they had a lot of interesting feedback. And there is that 90 10 rule, like 90 percent of the feedback you get is not really actionable for a variety of reasons. It might be bad feedback. It might be crazy feedback, it might be feedback you just can act on right now. But there is ten percent of it. that is like gold. it is like literally gold diamonds where it is like feedback of really good improvements to your core product that are not super hard to get to and actually make a lot of sense.
And my favorite is about five percent of the stuff I did not even see coming. it is like, oh my God, I never even thought of that. But that is a brilliant idea. Right. And I can point to so many features of stack overflow that we drive from metastatic overflow feedback and meta discourse. Right. Same exact principle of discourse. Know we are getting ideas from the comedians like, oh, my God, I never thought of that, but that is fantastic, right?
Like, I love that relationship with the community from having built these communities. What have you what have you learned about what is the process of getting a critical mass of members in a community? Is it luck, skill, timing, persistence? What is is it the tools like discourse that empower that community? What was the key aspect of starting for one guy or gal and then building it to two and then ten and one hundred and a thousand, so on?
I think we are starting with an end of one. I mean, I think it is persistence and and also, you have to be interesting. Like somebody I really admire once said something that I always liked about blogging. he is like, here is how you blog. You have to have something interesting to say and have an interesting way of saying it. Right. And then do that for like ten years. So that is the genesis is like you have to have sort of something interesting to say.
that is not exactly what everyone else is saying. And an interesting way of saying, which is another way of saying kind of entertaining way of saying it. And then as far as growing it, it is like ritual. You know, like you have to like say you are starting a blog. You have to say, look, I am going to blog every week, three times a week, and you have to stick to that schedule.
Right. Because until you do that for like several years, you are never going to get anywhere. Like, it just takes years to get to where you need to get to. And part of that is having the discipline to stick with the schedule. And and it helps, again, if it is something you are passionate about, this will not feel like work. Like, I love this. I could talk about this all day, every day. Right. You just have to do in a way that is interesting to other people.
And then as you are growing the community, that pattern of participation within the community of like generating these artifacts and inviting other people to help you, like, collaborate on these artifacts, like even in the case of blogging, like I felt in the early days of my blog, which I started in 2004, which is really the genesis of Stack Overflow. If you look at all my blog, it leads up to stack overflow, which was I have all this energy in my blog, but I do not like 40000 people were subscribing to me and I was like, I want to do something.
And then then I met Joel and said, Hey, Joel, I want to do something, take this ball of energy from a blog and do something. And all the people read my blog.
So that is like, oh, cool, you are involving us. you are saying, look, you are part of this community. let us build this thing together. Like they pick the name. Like we voted on the name for Stack Overflow on my blog, like we came naming a super hard first all the hardest problem in computer science. Coming with a good name for stuff, right? Yeah, but you can go back to my blog.
there is the poll where we voted and Stack Overflow became the name of the site and all the early beta users were audience of my blog plus Joel's blog. Right. So we started from like, if you look at the genesis, I was just a programmer who said, hey, I love programming, but I have no outlet to talk about it. So I am going to blog about it because I do not have enough people to work to talk to about it, because at the time I worked a place where, you know, programming was not the core output of the company.
It was a pharmaceutical company. And I just love this stuff, you know, to an absurd degree. So I was like, I will just blog about it and then I will find an audience and eventually found an audience, eventually found Joel and eventually built Stack overflow from that one core of activity. Right. But it was that repetition of feeding back in feedback from my blog comments, feedback from Joel, feedback from the early stack overflow community. When people see that you are doing that, they will follow along with you, right.
there is a cool you are here in good faith. you are actually, you know, not listening to everything because that is impossible.
that is impossible. But you are actually, you know, waiting our feedback and what you are doing because. And why would not I? Because who does all the work on Stack overflow me, Joel? No, it is the other programmers that are doing all the work, so you have got to have some respect for that and then, you know, discipline around. Look, you know, we are trying to do a very specific thing here on Stack Overflow. we are not trying to solve all the world's problems.
we are trying to solve this very specific problem in a very specific way, not because we are jerks about it, but because these strict set of rules help us get really good results. Right. And programmers, that is an easy sell for the most part, because programmers are used to dealing with ridiculous systems of rules like constantly. that is basically their job. So they are very. Oh, yeah, super strict system of rules that let us me go. I want that is programming.
Right. that is what Stack Overflow is.
So so you are making it sound easy. But in 2004, let us go back there. In 2004 you started the blog coding or was it called that at the beginning.
At the very beginning, it was one of the smart things I did. it is from a book by Steve McConnell, Code Complete, which is one of my favorite programming books, still probably my number one programming book for anyone to read. One of the smart things I did back then, I do not always do smart things when I start stuff. I contacted Stephenson. Hey, I really like this. It was a sidebar illustration indicating danger in code, right?
Coding horror was like, watch out.
And I love that illustration because it spoke to me because I saw that illustration go, oh my God, that that is me. Like, I am always my own worst enemy. Like, that is the key insight in programming is every time you write something, think, how am I going to screw myself?
Because you will constantly write so that the icon was like, Oh yeah, I need to constantly hold that mirror up and look and say, look, you are very fallible, you are going to screw this up.
Like, how can you build this in such a way that you are not going to screw it up later? Like, how can you get that discipline around making sure at every step I am thinking through all the things that I could do wrong or that other people could do wrong, because that is actually how you get to be a better programmer. A lot of. Times, right, so that sidebar illustration, I loved it so much and I wrote Steve before I started my blog and said, hey, can I have permission to use this?
Because I really like the illustration. And Steve was kind enough to give me permission to do that and continues to give me permission. So really, that is awesome.
But in 2004, you started this blog. You know, you look at Stephen King, his book on writing, or Steven Pressfield War of Art book. I mean, it seems like writers suffer. I mean, it is a hard process of writing, right?
That there is going to be suffering. I mean, I want to hit you like, well, the work is suffering, right? Like doing the work. Like even when you are every week, like, OK, that blog post was not very good or, you know, people did not like it or people write said disparaging things about it. You have to like have the attitude is like, you know, no matter what happens, I want to do this for me.
Right. it is not about you. it is about me. I mean, in the end it is about everyone, because this is how good work gets out into the world. But you have to be pretty strict about saying, like, you know, I am selfish in the sense that I have to do this for me. You know, you mentioned Stephen King like his book on writing, but like one of the things I do, for example, when writing is like I read it out loud, one of the best pieces of advice for writing anything is read it out loud, like multiple times and make it sound like you are talking, because that is the goal of good writing.
It should sound like you said it with with slightly better phrasing because you have more time to think of what you are saying. But like, it should sound natural when you say it.
And I think that is probably the single best writing advice I can give it. Just just read it over and over out loud. Make sure it sounds like something you would normally say. It sounds good.
And what is your process of writing? So there is usually a pretty good idea behind the blog posts.
So ideas. Right. So I think you got to have the concept that there is so many interesting things in the world like I mean, my God, the world is amazing, right?
Like, it is you can never write about everything that is going on because it is so incredible.
But if you can not come up with, like, let us say, one interesting thing per day to talk about, then you are not trying hard enough because the world is full of just super interesting stuff. And one great way to to like mine stuff is go back to old books because they bring up old stuff that is still super relevant. And I did that a lot because I was like reading classic program books and a lot of the early blockbuster like, oh, I was reading this program book and they brought this really cool concept and I want to talk about it some more.
And you get the I mean, you are not claiming credit for the idea, but it gives you something interesting to talk about that is kind of evergreen, right? Like you do not have to go. What should I talk about? So we will just go dig up some old classic programming books and find something that. Oh, wow, that is interesting. Or how does that apply today? Or what about X and Y? Or compare these two concepts to pull a couple of sentences from that book and then sort of play off of it.
Agree or disagree that so in 2007 you wrote that you were offered a significant amount of money to sell the blog.
You chose not to. What were all the elements you were thinking about? Because I would like to take you back. It seems like there is a lot of nonlinear decisions you made to life as. So what was that decision like?
Right. So one of the things I love is the Choose Your Own Adventure books, which I loved as a kid. And I feel like the early programer books because they are they are all about if then statements, right, if this than this. And they are also very, very unforgiving. Like there is all these sites that map the classic choose your own adventure books. And how many outcomes are bad? A lot of bad outcomes. So part of the game is like, oh, I got an outcome.
Go back one step, go back one further steps, like, how did I get here? Right. Like it is a sequence of decisions. And this is true of life. Right. Like every decision is a sequence.
Right. Individually, any individual decision is not actually right or wrong, but they lead you down a path.
Right. So I do think there is some truth that so this particular decision, the blog, I am fairly popular. there is a lot of RSS readers that I discovered and this guy contacted me out of the blue from this, like, bug tracking companies like, oh, I really want to buy your blog for, like, I think it was around one hundred thousand dollars, maybe like eighty thousand. But it was it was a lot. Right. And like and that is, you know, at the time, like I would have a year's worth of salary all at once.
So I would really think about like, well, you know, and I remember talking to people the times like, wow, that is a lot of money.
But I do not know, like I really like my blog. Right. Like, do I want to sell my blog because it would not really belong to me anymore at that point.
And one of the guidelines that I like to I do not like to give advice to people a lot, but one of the pieces of advice I do give, because I do think it is really true, it is generally helpful, is whenever you are looking at a set of decisions like, oh gosh, I do A, B or C, you got to pick the thing that is a little scarier in that list because not, you know, not like jump off a cliff.
Scary. But the thing that makes you nervous, because if you pick the safe choice, it is usually you are not really pushing, you are not pushing yourself. you are not choosing the thing that is going to help you grow. So for me, the scarier choice was to say, no. I was like, well, no, let us just see where this is going. Right? Because then I own it. I mean, it belongs to me. it is my thing.
And I can just take it and some other logical conclusion. Right. Because imagine how different the world would have been that I said yes and told the blog, it is like there probably would be stack overflow. Yeah. You know, a lot of other stuff would have changed. So for that particular decision, I think it was that same rule. Like what scares me a little bit more do the thing that scares you. Yeah. Speaking of which, startups, I think there is specifics, some more general questions that a lot of people will be interested in.
you have started stack overflow, you started discourse. So what is the is one, two or three guys, whatever it is in the beginning, what was that process like?
Do you start talking about did you start programming? Do you start like where the birth and the catalyst that actually.
Well, I can talk about in the context of a stack of and discourse. So I think the key thing initially is there is a problem, something there is some state of the world that is unsatisfactory to the point that, like, you are upset about it. Right. Like in that case, it was experts exchange. I mean, Joel's original idea, because I approached Joel is like, look, Joel, I have all this energy on my blog. I want to do something.
I want to build something. But I do not know what it is because I am not I am honestly not a good idea person. I am really not unlike the execution guy. I am really good at execution, but I am not good at, like, blue skying ideas, not my forte, which another reason why I like the community feedback because they blue sky all day long for you. Right. So when I can go in and cherry pick a blue sky idea from community, even if I have to spend three hours reading to get one good idea, it is worth it man.
But anyway, so the idea from Joel was, hey, experts change. it is got great data, but the experience is hideous, right? it is it is trying to trick you. It feels like a used car salesman. it is just bad. So it is like, oh, that is awesome. It feeds in a community. It feeds into like, you know, we can make creative commons. So I think the core is to have a really good idea that you feel very strongly about in the beginning that like there is a wrong in the world that we will an injustice that we will right through the process of building this thing for discourse.
It was like, look, there is no good software for communities to just hang out and, like, do stuff. Right, like whether it is problem solving, whatever forms are such a great building block of online community. And they are hideous. They were so bad. Right. It was embarrassing. Like, I literally was embarrassed to be associated with the software that we have to have somewhere to be proud of. it is like this is a competitive threat. Reddit, this is competitive Twitter.
This is competitor with Facebook right now. I would be proud to have the software on my site. So that was the genesis of discourse was feeling very strongly about there needs to be a good solution for communities.
So that is step one Genesis when I feel super strongly about right. And then people galvanize around the idea, like Joel was already super excited with the idea. I was excited about the idea. So with the forum software I was posting on Twitter, I had research as part of my research. I start researching the problem and I found a game called Forum Wars, which was a parody of forum. it is still very, very funny of like form behavior circle, like I would say twenty three.
it is age. Some like behaviors are a little different in there of Twitter, but it was awesome. It was very funny and it was like a game is like an RPG and it had a forum attached to it. So it was like a game about forums with a forum attached like this is awesome. Right. This is so cool. And the founder of that company or that project was not really company contacted me. This guy, Robin Ward from Toronto is hey, you know, I saw you been talking about forums and like, I really love that problem space.
it is like I would still love to build really good form software because I do not think anything out there is any good. And I was like, awesome at that point. I was like, we are starting a company because like, I could not have wished for a better person to walk through the door and say, I am excited about this, too. Same thing with you. All right. I mean, Joel is a legend in the industry, right? So when he walks around, I am excited about problems like me, too, man.
We can do this. Right? So that to me is the most important step. it is like having out of your super excited about and another person, a co-founder. Right. Because, again, you get that dual leadership right. Of like, am I making a bad decision?
Sometimes it is nice to have checks of like, is this a good idea? I do not know. Right.
So those are the crucial seeds. But then starting to build stuff, whether it is you program prototypes. So there is tons of research, there is tons of research like what is out there that failed because a lot of people look at successes. Oh, look at how successful X is. Everybody looks at the successes. Those are boring. Show me the failures, because that is what is interesting. that is where people were experimenting. that is where people were pushing. But and they failed.
But they probably failed for reasons that were not directly about the quality of their idea. Right. Yeah. So look at all the failures. do not just look what everybody looks at, which is like, oh, gosh, look at all these successful people. Look at the failures, look at the things that did not work, researched the entire field. And so that is the research that I was doing that led me to Robin Wright, was that. And then when we for example, we did a stack overflow, we are like, OK, well, I really like elements of voting in Digg and Reddit.
I like the Wikipedia. Everything's up to date. Nothing is like an old tombstone that has horrible, outdated information. We know that works. Wikipedia is an amazing resource. Blogging the idea of ownership is so powerful. Right. Like, oh, I wrote this and look how good Joe's answer is. Right. Like all these concepts, we were all together researching all the things that are out there that were working and why they were working and trying to, like, fold them into that.
Again, that Frankenstein's monster of what stack overflow is. And by the way, that was not a free decision because there is still a ton of tension in the stack overflow system. there is reasons people complain about stack overflow because it is so strict. Right. Why is it so strict? Why do you guys always close to my questions?
it is because there is so much tension that we built into the system around, like trying to get good, good results out of the system.
And, you know, it is not a free that stuff does not come for free. Right. it is not like we all have perfect and. And nobody will have to get their feelings hurt or nobody will have to get downvoted like that, it does not work that way, right.
So this is an interesting point and a small tangent. you are right about anxiety. So I have posted a lot of questions and answers and Steckel and the questions, I usually go to something very specific to something I am working on.
This is something you talk about that really the goal of Stack Overflow is not about is to write a question. Not it is not about you. it is about. The question that will help the community in the future, right, but that is a tough sell, right, because people are like, well, you know, I do not really care about the community. What I care about is my problem, my problem. And that is fair. Right? it is sort of that, again, that tension, that balancing act if we want to help you, but we also want help.
Everybody comes behind you. Right. The long line of people are going to say, oh, I kind of have that problem, too. Right. And if nobody's ever going to come up and say, I have this problem, too, then that question should not exist on stack overflow because the question is too specific and even that is tension. Right. How do you judge that? How do you know that nobody is going to have this particular question? So there is a lot of tension in the system.
Do you think that anxiety of asking the question, the anxiety of answering that tension is inherent to programmers is inherent to this kind of process? Or or can it be improved? Can be Happyland, where the that tension is not quite so harsh?
I do not think Stack Overflow can totally change the way it works. One thing they are working on, finally, is the ask page had not changed since 2011. I am still kind of bitter about this because I feel like you have a Q&A system. And what are the core pages in a system? Well, first of all, the question on the answers and all the also the ask page, particularly when you are a new user or someone trying to ask a question, that is the point at which you need the most help.
And we just did not adapt with the times. But the good news is they are working on this, from what I understand. And it is going to be more Wizzard based format. And you could envision a world where as part of this Wizard based program, when you are asking questions like come up with a good title, what a good word to put in the title. One word that is not good to put in the title is problem. For example, I have a problem.
Oh, you have a problem. OK, a problem. that is great, right? Like you need specifics, right? Like it is trying to help you make a good question title, for example. That step will be broken out, all that stuff. But one of those steps in that wizard of asking could say, hey, I am a little nervous. You know, I have never done this before. Can you put me in a queue for, like, special mentoring?
Right. You can opt in to a special mentor.
I think that would be fantastic. Like, I do not have any objection to that at all in terms of being an opt in system, because there are people there like, you know, I just want to help them. I want help a person no matter what. I want to go above and beyond. I want to spend like hours with this person. It depends what their goals are. it is a great idea. Who am I to judge? Right.
So that is fine. it is not precluded from happening. But there is a certain big city ethos that we started with, like, look, we are New York City. You do not come to New York City and expect them to be. Oh, welcome to the city, Joe. how is it going? Come on in. Let me show you around. that is now New York City works, right?
I mean, and, you know, again, New York City's a reputation for being rude, which actually I do not think it is, having been there fairly recently. it is not rude. People are just like going about their business right now. Look, look, I have things to do. I am busy. I am a busy professional, as are you.
And since you are a busy professional, certainly when you ask a question and ask the best possible question. Right. Because you are a busy professional and you would not accept anything less than a very well written question with a lot of detail about why you are doing it, what you are doing, what you researched, what you found. Right. Because you are a professional like me. Right. And this rubs people sometimes the wrong way.
And I do not think it is wrong to say, look, I do not want that experience. I want. Just a more chill place for for beginners, and I still think sackfuls is not was never designed for beginners. Right. there is this misconception that, you know, even Joel says something. Oh, yes, stack overflow for beginners.
And I think if you are a prodigy, it can be right. But it is not really representative. Right. Like, I think as a beginner, you want a totally different set of tools you want, like live screen sharing, live chat.
You want access to resources, you want a playground, like a playground you can experiment in and like test and all the stuff that we just do not give people, because that was never really the audience that we were designing for. That does not mean it is wrong. And I think it would be awesome if there was a site like that on the Internet or a stack of realizing, hey, you know, we are going to start doing this. that is fine, too.
You know, I am not there. I am not making those decisions. But I do think the pressure, the tension that you described is there for people to be, look, I am a little nervous because I know I got to do my best work. Right.
The other one is something you talk about, which is also really interesting to me, is duplicate questions or it is a it is a really difficult problem that you highlight super, super hard.
And like, you can take one little topic and you could probably write 10, 20, 30 ways of asking about that topic. And there will be all different. I do not know if there should be one page that answers all of it.
Is there a way that stack overflow can help disambiguate, like separate these duplicate questions or connect them together? Or is it a totally hopeless, difficult, impossible task? I think it is a very, very hard computer science problem and partly because people are very good at using completely different words and always amazed me. On Stack Overflow, you would have two questions that were functionally identical. And one question had like zero words in common with the other question like, oh my God, from a computer science perspective, how do you even begin to solve that?
And it happens all the time. People are super good at this, right? Accidentally at asking the same thing in like 10, 20 different ways. And the other complexity is we want some of those duplicates to exist, because if there is five versions with different words, have those five versions point to the one centralized answer? Right. it is like, OK, this is duplicate. No, no worries. This here is the here is the answer. You want it over here on this.
This this you know, the prime example that we want to have, rather having ten copies of the question and the answer, because if you have ten copies of the question you answer. This also devalues the reputation system, which programmers hate. As I previously mentioned, you are getting reputation for an answer that somebody else, ah, gave. it is like, well, it is an answer, but somebody else sort of gave that answer. So why are you getting a reputation for the same answer as the other guy who gave it four years ago?
People get offended by that. Right. So the reputation system itself adds tension to the system in that the people who have a lot of reputation become very incentivized to enforce the reputation system. And for the most part, that is good. I know it sounds weird, but for most parts I look strict systems. I think to use technology, you have to have the idea that, OK, strict systems ultimately work better. And I do think in programming you are familiar with loose typing versus strict typing.
Right? The idea that you can declare a variable, not declare a variable, rather just start using a variable and OK, I see it is implicitly an integer. Bam, awesome. Duqu equals five. Well Duqu is now an integer five. Right. And you are like, cool, awesome. Simpler. Right. Why would I want to worry about typing. And for a long time, like in the Ruby community, they are like, yeah, this is awesome.
Like you just do a bunch of unit testing, which is testing your program's validity after the fact to catch any bugs that that that strict typing of variables would have caught. And now you have this thing called typescript from Microsoft, from the guy who built C sharp enders, who is one of the greatest minds in software development. Right. Like in terms of language design and says, no, no, no, we want to bolt on a strict type system to JavaScript because it makes things better.
And now everybody is like, oh, my God, we we deployed TypeScript and found fifty latent bugs that we did not know about.
Right. Like, this is super common. So I think there is a truth in programming that strictness. it is not the goal. we are not saying be super strict. The strictness is correct. No, it is no no strictness produces better results. that is what I am saying. Right. So strict typing of variables. I would say you almost universally have consensus now is basically correct. Should be that way in every language. Right. Ducci equals five should Shariat error because.
No, you did not declare you did not tell me that Duqu was an integer. Right. that is a bug. Right. Or maybe you mistype you type deck. Right. Instead of Duqu. Right. You never know. This happens all the time. Right. So with that in mind, I will say that the strictness, the system is correct. Now, that does not mean cruel. That does not mean mean. That does not mean angry. It just means strict.
OK, so I think where there is misunderstanding and people get cranky. Right. Like in other question you asked is like, why are programmers kind of mean sometimes, well who to programmers work with all day long?
So I have a theory that if you are in a job and you work with assholes all day long, what do you eventually become? An asshole, an asshole? And what is the computer except the world's biggest asshole? Because the computer has no time for your bullshit. The computer, the minute you make a mistake, everything comes crashing down. Right. One semicolon has crash space missions. Right. So that is normal. So you begin to internalize that. You begin to think, oh, my coworker, the computer.
Is super strict and kind of a jerk about everything, so that is kind of how I am going to be because I work with this computer and I have to accede to its terms on everything. So therefore, you start to absorb that and you start to think, oh, well, being really strict arbitrarily is really good. And error of error. Code five six two four nine is a completely good error message because that is what the computer gave me. Right.
So you kind of forget to be a person at some level. And you know how they say great detectives internalized criminals and kind of are criminals themselves, like this trope of the master detective is good because you can think like the criminal. Well, I do think that is true of programmers. Really good programmers think like the computer because that is their job.
But if you internalize it too much, you become the computer. You kind of become a jerk to everybody because that is what you have internalized. you are almost not a jerk, but you have no patience for a lack of strictness.
As you said, it is not out of a sense of meanness. it is accidental. But I do believe it is an occupational hazard of being a programmer is you start to behave like the computer. you are very unforgiving. you are very terse. you are very wrong. Incorrect. Move on. it is like, well, can you help me? Like, what could I do to fix not wrong. Next question.
Like, that is normal for the computer, right? Just fail next. Right. Like out of you remember. And Saturday Night Live, like in the nineties they had this character was an IT guy. Yeah. The move guy move.
Was that Jimmy Fallon. No. No. Who. Playdom. OK, yeah. I remember move. Right. And he had no patience for you. Might have been mad TV actually or TV might have been.
Might have been. But anyway that was the that is always been the perception. Right. You start to behave like the computer. it is like, oh, you are wrong.
Out of the way. You know, you have written so many blog posts about programming, about programs, programming, programmers. What do you think makes a good let us start with what makes a good solo programmer? Well, I do not think you should be a solo programmer.
I think to be a good solo programmer, it is kind of like what I talked about. Well, not on Mike, but one of the things John Carmack, one of the best points he makes in the book, Masters of Doom, which is a fantastic book. And anybody listening this who has not read it, please read. it is such a great book is that at the time they were working on stuff like Wolfenstein and Doom, like they did not have the resources that we have today.
They did not have stack overflow. They did not have Wikipedia, they did not have like discourse forums. They did not have places to go to get people to help them write. They had to work on their own. And that is why it took a genius like Carmac to do this stuff, because you had to be a genius to invent from first principles. A lot of the stuff he was he was like the hacks he was coming up with were genius, right. Genius level stuff.
But you do not need to be a genius anymore. And that means not working by yourself. You have to be good at researching stuff online. You have to be good at asking questions, really good questions that are really well researched, which implies, oh, I went out in research for three hours before I wrote this. Questions like, that is what you should be doing because that is what is going to make you good. Right? To me, this is a big difference in programming.
And like the 80s versus programming today is like you you kind of had to be by yourself back then. Like, where would you go for answers? I remember in the early days when I was a learning visual basic for Windows, like I would call the Microsoft helpline on the phone when I had like the program because I was like, I do not know what to do. So I would like go and call. And they have these huge phone banks and like, can you imagine how alien that is now?
Like, who would do that? Right. Like, that is crazy.
So there was just nowhere else to go when you got stuck. Right. Like I had the books that came with it. I read those study those religiously. I just saw a post from Steve Sinofsky that said this C++ version seven came with like 10000 pages of written material because where else were you going to figure that stuff out? Go to the library when you did not have Wikipedia, you did not have, you know, read it, you know, in order to go to answer these questions.
So you have talked about through the years, basically not having an ego and not thinking that you are the best programmer in the world. And so it was kind of just looking to improve to become a better programmer than you were yesterday. So how have you changed as a programmer and as a as a thinker designer around programming over the past? Was it fifteen years really of being a public figure?
I would say the big insight that I had is eventually as a programmer, you have to kind of stop writing code to be effective, which is kind of disturbing because you really love it. And but you realize like being effective at programming, at programming in the general sense does not mean writing code. A lot of times you can be much more successful by not writing code and writing code in terms of just solving the problems you have, essentially hiring people that are really good and like setting them free and like giving them basic direction.
Right. Like on strategy and stuff, because a lot of the problems you encounter are not necessarily solved. You like really gnarly code. they are solved by conceptual solutions, which can then be turned into code. But are you even solving the right problem? I mean, so I would say for me, the main insight I have is to succeed as a. Programmer, you eventually kind of stop writing code that is going to sound discouraging probably to people hearing, but I do not mean it that way.
What I mean is that you are coding at a higher level language eventually, like, OK, so we are coding an assembly line, right? that is the beginning. Right. you are hard coded to the architecture. Then you have stuff like sybaritic. Wow. We can abstract across the architecture, write code. I can then compile that code for arm or, you know, whatever, you know, sex or whatever else is out there. And then even a higher level than that.
Right. Like you are looking at like Python. Ruby interpreted languages. And then to me as a programmer, like, OK, I want to go even higher. I want to go higher than that. How do I abstract higher than language. it is like, well you abstract in spoken language and written language. Right. Like you are sort of inspiring people to get things done, giving them guidance. Like what if we did this, what if we did this.
you are writing in the highest level language that there is, which is for me, English. Right. Whatever your spoken languages. So it is all about being effective. Right. And I think Patrick McKenzie, patio lesson on Hacker News and works at Stripe has a great post about this of how calling yourself a programmer is a career limiting move at some level. Once you get far enough from your current. I really believe that. And I again, I apologize.
This is sound discouraging. I do not mean it to be. But he is so right because all the stuff that goes on around the code, like the people like that is another thing. If you look at my blog entries is about, wow, programming is about people more than it is about code, which does not really make sense. Right. But it is about can these people even get along together? Can they understand each other? Can you even explain to me what it is you are working on?
Are you solving the right problem? People? Right. Another classic program book, which again, up there with code complete, please read people where it is that software is people, right? People are the software first and foremost. So a lot of the skills that I was working on early in the blog were about figuring out the people parts of programming, which were the harder parts, the hard part of programming.
Once you get a certain skill of a programmer, you can pretty much solve any reasonable problem that is put in front of you. you are not writing algorithms from scratch, right? That just does not happen. So any sort of reasonable problem in front of you going to be able to solve. But what you can not solve is our manager is a total jerk.
You cannot solve that with code that is not a code solvable problem, and yet that will cripple you way more than, oh, we had to use the stupid framework I do not like or or you know, Sam keeps writing bad code that I hate or, you know you know, Dave is off there in the wilderness writing God knows what. Right. These are not your problems. Your problem is your manager or a coworker is so toxic to everybody else in your team that, like, nobody can get anything done because everybody's so stressed out and freaked out.
Right. These are the problems that you have to attack. Absolutely.
And so as you go to these higher level abstractions, as you have developed as a programmer to hire high level abstraction, go into natural language, you are also the guy who kind of preached, you know, building it, you know, diving in and doing it and like, learn by doing. Yes.
Do you do you worry that as you get to higher, higher level abstractions, you lose track of the lower level of just building is like, do you worry about that? You know, even not maybe now, but ten years from now. 20 years from now? Well, no.
I mean, there is always that paranoia and oh, gosh, I do not feel as valuable since I am not writing code. But for me, like when we started the Discourse Project, it was Ruby, which I did not really know. Ruby, I mean, as you pointed out, and this is another valuable observation stack overflow. You can be super proficient. For example, C Sharp, which I was working in. that is why we built Stack Overflow and and still is written and then switched to Ruby.
And you are a newbie again, right? Like I am but but you have the framework. I know what a for loop is. I do not recursion is. I know you know WesTrac stack traces. Right. Like I have all the fundamental concepts to be a programmer. I just do not know Ruby. So I am still on a higher level. I am not like a beginner beginner like you are saying. I am just like I need to apply my programming concepts already know to Ruby.
Well, that is a question that is really interesting. So looking at Ruby, how do you go about learning enough that your intuition can be applied?
Well, that carried over. that is all trying to get to is like what I realized when I started with just me and Robyn.
I realized if I bother Robyn, I am now costing us productivity, right? Every time I go to Robyn, rather than building the the our first alpha version of discourse, he is now answering my stupid questions about Ruby. Is that a good use of his time? Is that a good use of my time? The answer to both of those was resoundingly no. Right. Like we were getting to an Alpha and it was a pretty much OK, we will hire more programmers.
Right. Like we eventually hired Neil and then eventually Sam, who came in as a co-founder. I actually was Sam first, then Neil later. But the answer to the problem is just hire other competent programmers, not like teach now. I shall pull myself up by my bootstraps and learn Ruby. But at some point, writing code becomes a liability to you in terms of getting things done. there is so many other things that go on in the project, like building the prototype, like you mentioned, like, well, how do you if you are not writing code has a focus on like what?
What are we building? Well, first, basic mockups and research. What do we even want to build? there is a little bit of that that goes on. Then very quickly get to the prototype stage, like build a prototype. let us give. Right on the prototype, really, really rapidly, that is what we with this course and that is what we demoed to get our seed funding for this course was the the alpha version of discourse that we had running and ready to go.
And it was very it was bad. I mean, it was I will just tell you, it was bad. I have we have screenshots and I am just like embarrassed to look at it now. But it was the prototype we were figuring out, like, what what is working, what is not working, because there is such a broad gap between between the way you think things will work in your mind or even on paper and the way they work. Once you sit and live in the software, like actually spend time living and breathing.
I was so different. So my philosophy is get to prototype and then what? you are really optimizing for speed of iteration, like how you can turn the crank, how quickly can we iterate? that is the absolutely critical metric of any software project. And I had a tweet recently that people liked and I totally this is so fundamental to what I do is like if you want to measure the core competency of any software tech company, it is the speed at which somebody can say, hey, we really need this word in the product change of this word.
Right. Because it will be more clear to the user like what we like instead of respondents reply or something. But there is some from the conception of that idea to how quickly that single word can be changed in your software rolled out to users.
That is your life cycle. that is your health, your heartbeat. If your heartbeat is like super slow, you are basically dead. No, seriously, like if it takes two weeks or even a month to get that single word change, there was, oh, my God, this great idea, that word is so much clearer. I am told me like a super like everybody on board for this change. it is not like let us just change a word because we are bored.
it is like this is an awesome change. And then it takes months to roll out.
it is like your dead. Like you can not iterate, you can not how you can do anything right.
Like so anyway, about the heartbeat, it is like get the prototype and then iterate on it. that is that is what I view is like the central tenet of modern software development. that is fascinating. You put it that way. it is actually so I work, I build autonomous vehicles.
And when you look at what maybe compare Tesla to most other automakers, the site, the whatever the heartbeat for Tesla is literally days now in terms of they can over the air, deploy software updates to all their vehicles, which is markedly different than every other automaker, which takes years to update a piece of software.
And so and that is reflected in everything. that is the final product that is reflected in really how slowly they adapt to the times.
And to be clear, I am not saying being a hummingbird is the goal either. it is like, you know, in a heartbeat. it is like so fast. it is like you are winning, you know, you are just freaking out. But like it is a measure of health. You should have a healthy heartbeat. it is up to four people listening to decide what that means. But it has to be healthy. It has to be reasonable because otherwise you are going to be frustrated because like, that is how you build software.
You make mistakes, you roll it out, you live with it, you see what it feels like and say, oh, God, that was a terrible idea. Oh, my gosh. This it could be even better if we did y right. You turn the crank and then the more you do that, the faster you get ahead of your competitors ultimately because you are its rate of change. Right. Delta V. Right. How fast are you moving.
Within a year you are going to be miles away by the time they catch up with you. Right. Like that is the way it works. And plus users like as a software developer and I love software that is constantly changing because I do not understand. People get super pissed off when, like, oh, they changed the software on me. How dare they?
I am like, yes, change the software, change it all the time. And that is that is what makes this stuff great, is that it can be changed so rapidly and become something that that is greater than it is now. Now, granted, there are some changes that suck. I admit I have seen it many times, but in general, it is like that is what makes software cool, right. Is that it is so malleable, like fighting that is like weird to me because it is like, well, you are fighting the essence of the thing that you are building.
Like, that does not make sense. You want to really embrace that, not not to be a hummingbird, but like embrace it to a healthy cycle of your heartbeat. Right.
So you talk about that people really do not change. that is true. that is why I probably a lot of the stuff you write about in your blog probably will remain true.
there is a flip side of the coin. People do not change. So investing and understanding people is is like learning Unix in 1970 because and nothing has changed. Right. Like all those things you have learned about people will still be valid thirty four years from now. Whereas if you learn the latest JavaScript framework, that is going to be good for like two years. Right, exactly.
So but if you look at the future of programming, so there is a people component, but there is also the technology itself. Do you what do you see as the future programming? Will it change significantly or as far as you can tell, people are ultimately programming. And so it will not it is not something that you foresee changing in any fundamental way.
Well, you are going to go look back on sort of the basics of programming. And one of things that always shocked me is like source control. Like I did not learn anything about source control when I graduated college in nineteen ninety two. But I remember hearing from people like as late as, like 1998, 1999, like even maybe today they are not learning source control. And to me it is like, well how can you not learn source control that is so fundamental to working with other.
Programmers working in a way you do not lose your work, like just just basic stuff, the literal bedrock software development is source control. Now, you compare today like GitHub, I like Microsoft, but GitHub, which I think was incredibly smart acquisition, move on their part. Now they have anybody who wants, like, reasonable source control to go someone. GitHub is all set up for you. Right. there is tons of walkthrough, tons of tutorials.
So from the concept of like has programming advanced from, say, 1999, it is like, well, hell, we have GitHub. I mean, my God. Yes, right. Like, it is it is massively advanced over over what it was. Now, as to whether programming is significantly different, I am going to say no. But I think the baseline of like what we view is like fundamentals will continue to go up and actually get better, like source control, because that is one of the fundamentals that has gotten, I mean, hundreds of orders of magnitude better than it was 10, 20 years ago.
Those are the fundamentals. Let me introduce two things that maybe you can comment on. So one is mobile phones. So that could fundamentally transform what or what programming is or maybe not. Maybe you can comment on that. And the other one is artificial intelligence, which promises to in some ways to do some of the programming for you is one way to think about it. So it is really what a programmer is, is using the intelligent that is inside your skull to to do something useful.
The hope with artificial intelligence is that it does some of the useful parts for you where you do not have to think about it. So do you see, Smartphone's, the fact that everybody has one and they are getting more and more powerful as potentially changing programming and do you see as potentially changing program?
OK, so that is good. So smartphones have definitely changed. I mean, since, you know, I guess 2010 is when they really started getting super popular. I mean, in the last eight years, the world has literally changed. I, like everybody carries a computer around and that is normal. I mean, that is such a huge change in society. I think we are still dealing with a lot of the positive negative ramifications of that. Right. Like, everybody is connected all the time.
Everybody's on the computer all the time. That was my dream world as a geek. Right. But it is like, be careful what you ask for, right? Like, wow, now everybody has a computer. it is not quite the utopia that we thought it would be. Right. Computers can be used for a lot of stuff that is not necessarily great. So to me, that is the central focus of the smartphone is just that it puts a computer in front of everyone granted a small touch screen, small touch screen computer.
But as for programming, like, I do not know, I do not think that I have kind of over time come to subscribe to the Unix view of the world when it comes to programming.
it is like you want to teach these basic command line things. And that is just what programming is going to be for, I think a long, long time. I do not think there is any magical, like visual programming that is going to happen. I just I do not know. I have over time, I have become a believer in that Unix philosophy of just you know, they kind of had to write with Unix. that is going to be the way it has for a long, long time.
And we will continue to, like I said, raise the baseline. The tools get better, it will get simpler. But it is still fundamental going to be command line tools, you know, fancy ideas. that is kind of it for the foreseeable future. I am not seeing any visual programming stuff on the horizon because you are going to think like what do you do on a smartphone that be directly analogous to programming? Like, I am trying to think. Right, like and there is really not much.
So not necessarily analogous to programming, but the kind of things that the kind of programs you would need to write. My need to be very different. Yeah, and the kind of languages I mean, but I probably also subscribe to the same just because everything in this world might be written in JavaScript.
Oh yeah, that is that is already happening. I mean, discourse is about discourse is itself. JavaScript is another bet on that side of the table, and I strongly believe that.
So I would say smartphones have mostly a cultural shift more than a programming shift. Mm hmm. Now, your other question was about artificial intelligence and like sort of visus predicting what you are going to do. And I do think there is some strength to that. I think artificial intelligence kind of overselling it in terms of what it doing. it is more like people are predictable, right? People do the same things like let me give an example. One one check we put in a discourse that is in a lot of big commercial websites is say you log in from New York City now and then an hour later you log in from San Francisco.
it is like, well. Hmm, that is interesting. How did you get from New York to San Francisco in one hour? So at that point, you are like, OK, this is a suspicious login at that point. So we would alert you was like, OK, but that is not I. Right. that is just a heuristic of like, how did you in one hour get two thousand miles. Right.
That does not mean you grabbed maybe you are a VPN.
there is other ways to happen, but that is just a basic prediction based on the idea that people pretty much do not move around that much like they may travel occasionally. But like nobody. I mean, unless you are a traveling salesman that is literally travelling the world every day, like there is so much repetition and predictability in terms of things you are going to do. And I think good software anticipates your needs, like, for example, Google, I think it is called Google now or whatever.
Google thing is, it predicts your commute and predicts based on your phone location, like where are you every day? Well, that is probably where you work, that kind of stuff.
I do think computers can get a lot better at that, but I hesitate to call it like full blown A.I. it is just computers getting better. At first of all, they have a ton of it because every has a smartphone. Now, all of a sudden we have all this data that we did not have before about location, about like, you know, communication and feeding that into some some basic heuristics and maybe some fancy algorithms that turn it into predictions of anticipating your needs.
Like like a friend would be like, oh, hey, I see your home. Would you like some dinner? Right. Like, let us go get some food, because that is usually what we do this time of day. Right. In the context of actually active programming, do you see ideas improving and making the life of programming is better?
I do think that is possible because there is a lot of repetition in programming, right? Oh, you know, Clippy would be the bad example of.
Oh, I see. It looks like you are writing a for loop, but there are patterns in code, right. Like and actually libraries are kind of like that. Right.
Like rather than go, you know, code up your own HTTP request library, it is like, well, you would use one of the existing ones that we have that is already troubleshoot. Right. it is not I persay.
it is just, you know. Building better Lego bricks, bigger Lego bricks that have more functionality in them so people do not have to worry about the low level stuff as much anymore, like WordPress, for example, to me is like a tool for somebody who is not a programmer to do something.
I mean, you can turn WordPress into anything. it is kind of crazy, actually, through plug ins. Right. And that is a programming persay. it is just Lego bricks stacking WordPress elements. Right. A little bit of configuration glue. So I would say maybe in a broader sense what I am seeing, like they will be more gluing and less like actual programming.
And that is a good thing, right? Because most of the stuff you need is kind of out there already.
You said 1970s Unix, DCP and these kind of old.
Remnants of of the early birth of programming remaining with us for a long time, like you said, Unix in itself, you see ultimately, you know, this stuff just being there out of momentum.
I kind of do. I mean, I was a big believer in windows early on. I was a big you know, I was like Unix. What a waste of time. But over time, I completely flipped on that where I was like, OK, the Unix guys were right. And pretty much Microsoft and Windows were kind of wrong, at least on the server side and on the desktop. Right. You need a go, you know, and stuff.
And yeah, the two philosophies like Apple built on Unix, effectively Darwin and on the desktop is a slightly different story.
But on the server side where you are going to be programming now, it is a question where the programming is going to be is going to be a lot more like client side programming because technically discourse is Clydeside programming the way you get discourse. We deliver a big bowl of JavaScript, which is the next cue locally. So are you really using a lot more local computing power? we will still retrieve the data. Obviously, we have to display the posts on the screen and so forth.
But in terms of like sorting and a lot of the basic stuff, we are using the host processor. But to the extent that a lot of programming is still going to be server side, I would say yeah, the Unix philosophy, definitely one. And they will be different veneers over Unix. But it is still if you if you peel away one or two layers, it is going to be Unix for a long I think Unix one. I mean, so definitively it is interesting to hear you say that because you have done so much excellent work on the Microsoft side in terms of backend development.
Cool. So what is the future hold for Jeff Atwood?
I mean, the discourse continuing, the discourse in trying to improve conversation on the Web while this course is what I read, is originally called a five year project, then really quickly revised that to a 10 year project.
So where we started in early to 2013, that is when we launched the first version. So we are still, you know, five years in. This is the part where it starts getting good, like we have a good product now, discourse, there is any any project you built in software. It takes three years to build what you want it to build anyway. Like this one is going to be terrible, which it was. But you ship it anyway because that is how you get better at stuff.
it is about turning the crank. it is not about V1 being perfect because that is ridiculous. it is about V1. Then let us get really good at one point one one point two, one, four, three. Like how fast can we iterate? And I think we are iterating like crazy on discourse to the point that, like, it is a really good product. Now we have serious momentum. And my original vision was I want to be the WordPress of discussion, meaning someone came to you and said, I want to start a blog.
Although the very question is kind of archaic now. it is like who actually blogs anymore?
But I wanted the answer to that to be it would be WordPress normally, because that is the obvious choice for blogging most of the time. But if someone said, hey, I want to I need a group of people to get together and do something, the answer should be discourse, right? That should be the default answer because it is open source. it is free, does not cost you anything. You control it, you can run it. Your minimum server cost for discourse is five bucks a month.
At this point. They actually got the VPs prices down. It used to be ten dollars a month for one gigabyte ram, which we are are dependent. We have a kind of heavy stack, like there is a lot of stuff in discourse. You need postgrads, you need retests, you need Ruby on rails, you need a sidekick for scheduling.
it is not a trivial amount of stuff because we were architected for like, look, we are building for the next ten years. I do not care about shared hosting.
that is that is not my model.
My idea is like, hey, you know, eventually this is going to be very cheap for everybody and I want to build it right. Using again, you know, higher, bigger building block levels. Right. That have more requirements.
And there is a WordPress model of what press dot org or perhaps dot com is their central hosting for discourse or.
No, there is we are not strictly segmenting into the open source versus the commercial side. We have a hosting business. that is how discourse makes money as we host discourse instances. And we have a really close relationship with our customers of the symbiosis of them giving us feedback on the product. We definitely wait feedback from customers a lot heavier than feedback from somebody who just wanders by and gives feedback. But that is where we make all our money. But we do not have a strict division.
We encourage people to use discourse like the whole point is that it is free, right? Anybody can set it up. I do not want to be the only person that hosts discourse. that is absolutely not the goal. But it is a primary way for us to build a business. And it is actually kind of a great business. I mean, the business is going really, really well in terms of hosting. So I used the word Google Research as a company that is basically funded on advertisements on Facebook.
Let me ask if you can comment on it. I think advertisement is best, so you would be extremely critical on what ads are. But at its best, it is actually serving you, in a sense, is giving you it is connecting you to what you would want to explore. So it is like related posts to related content is the same. that is the best of that investment.
So discourse is connecting people based on their interests. It seems like a place where advertisement at its best could actually serve the users.
Is that something that you are considering thinking about as a. Way to bring to financially support the platform. that is interesting because I actually have a contrarian view of advertising, which I kind of agree with you. I recently installed that blocker like reluctantly because I do not like to do that.
But like the performance of the ads, man, like they are so heavy now and like, it is just crazy. So, like, it is almost like a performance argument more than like I actually am pro ads and I contrarian. I have a contrarian viewpoint. I agree with you if you do ads. Right, it is charming stuff you will be interested in anyway. I do not mind that. That actually is kind of a good thing.
So plus I think it is rational to want to support the people that are doing this work through seeing their ads. And but that said, I run Adblock now, which I, I did not want to do, but I was convinced by all these articles like 30 or 40 megabytes of stuff just to serve you ads.
Yeah, it feels like ads now are like the experts exchange of whenever you start to stack overflow, it is a little bit it is all there.
So many companies and ad tech, though, it is embarrassing. Like you can do that if you see this logo charts of like just the whole page is like you can not even see them. they are so small. there is so many companies in the space.
But since you brought it up, I do want to point out that very, very few discourse sites actually run using an ad supported model. it is not effective. Like it is too diluted, it is too weird, it does not pay well and like, users hate it. So it is a combination of, like, users hate it. It does not actually work that well in practice. Like in theory. Yes. I agree with you, Finn. Clean, fast ads that were exactly the stuff you would be interested in.
Awesome. Were so far from that, though, right? Like Google does an OK job, the retargeting and stuff like that. But in the in the real world, discourse sites rarely can make ads work. It just does not work for so many reasons. But, you know, it does work is subscriptions, Patreon affiliate codes for like Amazon of like just oh here here is a cool click and then you click and go to Amazon. They get a small percentage of that, which is fair I think.
I mean because you saw the yo yo on that site and you click through and you bought it. Right. that is fair for them to get five percent of that or two percent of that. Whatever it is, those things definitely work. In fact, a site that I used to participate on a lot, I helped the owner one things I, I got them switched to discourse. I basically paid them to switch to discourse because I was like, look, you guys going to switch?
I can not come here anymore on this terrible software.
But I was like, look, and on top of that, like, you are serving people ads that they hate. Like you should just go full on Patriot because he had a little bit of hatred on full Patreon. Do the Amazon affiliates thing, Phryne, Amazon links that you posted and just do that and just triple down on that stuff. And that is worked really well for them and this creator in particular. So that stuff works, but adds I mean, definitely not working, at least on discourse.
So last question. you have created the code keyboard. I have programmed most of my adult life and a Kinesis keyboard. I have one upstairs now. Can you describe what a mechanical keyboard is and why is it something that makes you happy?
Well, you know, this is another fetish I do not really like. it is not required. You can do programming on any kind of keyboard, but even like an on screen keyboard. Oh God, that is terrifying.
I like but you could touch I mean, if you look back to the early days being there were chick lit keyboards, which are I mean, those are awful. Right. But what is a chick flick you were. Oh God. OK, well it is just like thin rubber membranes or the rubber ones.
Oh no. Superbad, right. Yeah. So it is a fetish item. All it really says is, look, I care really about keyboards because the keyboard is the primary method of communication with the computer.
Right. So it is just like having a nice mic for this, this podcast. You want a nice keyboard, right? Because it has very tactile feel. I can tell exactly when I press the key, I get that little click. So, oh, it feels good. And it is also kind of a fetish. I was like, wow, I care enough about programming that I care about the tool, the primary tool that is coming out of the computer.
Make sure it is as good as it feels good to use for me and like, I can be very productive with it. So to be honest, it is a little bit of a fetish item, but a good one. It indicates that you are serious. And in case you are interested, it indicates that you care about the fundamentals because you know what makes you a good programmer, being able to type really fast. Right. Like this is true. Right? So a core skill is just being able to type fast enough to get your ideas out of your head into the code base.
So just practicing your typing can make you a better programmer. It is also something that makes you well, makes you enjoy typing the actual act.
Something about the process, like I play piano, it is technical, just a tactile feel that ultimately feeds the passion. Makes you happy right now.
Totally. that is it. I mean, and it is funny because artisanal keyboards have exploded, like Masteroff is gone ballistic with this stuff. there is probably like five hundred keyboard projects on Masteroff alone. And there is some other guy I follow on Twitter. I used to write for this, the site, the tech report way back in the day. And it is like every week he is just posting, like, what I call keyboard porn of like, just cool keyboard. Oh, my God.
This, like, really cool, right? Like that is like how many keyboards this guy has got, like me with yo yos.
How many yo yos you have, how many do you need. Well, technically one, but I like a lot. I do not know why. So same thing with keyboard so yeah they are awesome. Like I highly recommend anybody who does not have a mechanical to research it, look into it and see what you like and. it is ultimately a fetish item, but I think these sort of items, these religious artifacts that we have are part of what makes us human like that.
That part's important. it is kind of makes life worth living.
And, yes, it is not necessary in the strictest sense. But anything necessary, if you think of. Yeah, right. Like and so.
Yeah, we are not so sure.
Jeff, thank you so much for talking to. Yeah. you are welcome.
Thanks for having me.
