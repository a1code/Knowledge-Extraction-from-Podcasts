The following is a conversation with Ian Goodfellow. he is the author of the popular textbook on Deep Learning, simply titled Deep Learning. He coined the term of generative adversarial networks otherwise known as Gan's, and with his 2014 paper, is responsible for launching the incredible growth of research and innovation in this subfield of deep learning. He got his B.S. in arms at Stanford, his Ph.D. at University of Montreal with Yahshua, Banjo and Aaron Carvell. He held several research positions, including an open eye Google brain and now at Apple as the director of Machine Learning.
This recording happened while Ian was still a Google brain. But we do not talk about anything specific to Google or any other organization. This conversation is part of the artificial intelligence podcast, if you enjoy it. Subscribe on YouTube, iTunes or simply connect with me on Twitter at LAX. Friedman spelled F our ID. And now here is my conversation with Ian Goodfellow.
You open your popular deep learning book with a Russian doll type diagram that shows deep learning is a subset of representation learning, which in turn is a subset of machine learning and finally a subset of A.I. So this kind of implies that there may be limits to deep learning in the context of AI. So what do you think is the current limits of deep learning and are those limits something that we can overcome with time?
Yeah, I think one of the biggest limitations of deep learning is that right now it requires really a lot of data, especially labeled data. There are some unsupervised and some supervised learning algorithms that can reduce the amount of label data you need. But they still require a lot of unlabeled data, reinforcement learning algorithms. They do not need labels, but they need really a lot of experiences as human beings. We do not learn to play Pong by failing at Pong two million times.
So just getting the generalization ability better is one of the most important bottlenecks and the capability of the technology today. And then I guess I would also say deep learning is like a component of a bigger system. So far, nobody is really proposing to have only what you would call deep learning as the entire ingredient of intelligence. You use deep learning as sub modules of other systems like Alpha Go has a deep learning model that estimates the value function. Most reinforcement learning algorithms have a deep learning module that estimates which action to take next.
But you might have other components if you are basically building a function estimate.
Or do you think it is possible? He said. Nobody's kind of been thinking about this so far. But do you think neural networks can be made to reason in the way symbolic systems did in the 80s and 90s to do more create more like programs as opposed to functions?
Yeah, I think we already see that a little bit. I already kind of think of neural nets as a kind of program, I think of deep learning as basically learning programs that have more than one step. So if you draw a flowchart or or if you draw a tensor flow graph describing your machine learning model, I think of the depth of that graph as describing the number of steps that run in sequence. And then the width of that graph is the number of steps that run in parallel.
Now, it is been long enough that we have had deep learning, working, that it is a little bit silly to even discuss shallow learning anymore. But back when I first got involved in A.I., when we used machine learning, we were usually learning things like support vector machines where you could have a lot of input features to the model and you could multiply each feature by a different weight. But all those multiplications were done in parallel to each other and there was not a lot done in the series.
I think what we got with deep learning was really the ability to have steps of a program that run in sequence. And I think that we have actually started to see that what is important with deep learning is more the fact that we have a multi-step program rather than the fact that we have learned a representation.
If you look at things like notes, for example, they take one particular kind of representation and they update it several times back when deep learning first really took off in the academic world in 2006, when Jeff Hinton showed that you could train deep belief networks, everybody who was interested in the idea thought of it as each layer learns a different level of abstraction that the first layer trained on images learned something like edges and the second layer learns corners. And eventually you get these kind of grandmother cell units that recognize specific objects.
Today, I think most people think of it more as a computer program where as you add more layers, you can do more updates before you output your final number. But I do not think anybody believes that layer 150 of the Reginette is a great grandmother cell and you layer one hundred is contours or something like that. OK, so you think you are not think of it as a singular representation that keeps building, you think of it as a program sort of almost like a state representation is a state of understanding.
Yeah, I think of it as a program that makes several updates and arrives at better and better understandings. But it is not replacing the representation at each step, it is refining it. And in some sense, that is a little bit like reasoning. it is not reasoning in the form of deduction, but it is reasoning in the form of taking a thought and refining it and refining it carefully until it is good enough to use to.
Do you think and I hope you do not mind, we will jump Theosophical every once in a while. Do you think of, you know, cognition, human cognition or even consciousness as simply a result of this kind of sequential representation learning?
Do you think that can emerge cognition?
Yes, I think so. Consciousness, it is really hard to even define what we mean by that. I guess there is consciousness is often defined as things like having self awareness, and that is relatively easy to turn into something actionable for a computer scientist to reason about. People also define consciousness in terms of having qualitative states of experience like qualia. there is all these philosophical problems like could you imagine a zombie who does all the same information processing as a human but does not really have the qualitative experiences that we have, that sort of thing?
I have no idea how to formalize or turn it into a scientific question. I do not know how you could run an experiment to tell whether a person is a zombie or not. And similarly, I do not know how you could run an experiment to tell whether an advanced A.I. system had become conscious in the sense of qualia or not.
But in the more practical sense, like almost like self attention, you think consciousness and cognition can in an impressive way emerge from current types of architectures?
Yeah, because. Yeah, or or if if you think of consciousness in terms of self awareness and just making plans based on the fact that the agent itself exists in the world, reinforcement learning algorithms are already more or less forced to model the agents effect on the environment so that that more limited version of consciousness is already something that we get limited versions of with reinforcement learning algorithms if they are trained well.
But you say limited. So the big question really is how you jump from limited to human level. Yeah, right.
And whether it is possible, you know, even just building common sense reasoning seems to be exceptionally difficult.
So if we scale things up, if we get much better unsupervised learning, if we get better at labeling, if we get bigger datasets, more compute, do you think we will start to see really impressive things that go from limited to, you know, something echoes of human level cognition?
I think so, yeah. I am optimistic about what can happen just with more computation and more data. I do think it will be important to get the right kind of data to do. Most of the machine learning systems we train are mostly trained on one type of data for each model. But the human brain, we get all of our different senses and we have many different experiences like, you know, riding a bike, driving a car, talking to people, reading.
I think when you get that kind of integrated data set, working with a machine learning model that can actually close the loop and interact, we may find the algorithms not so different from what we have today learned. Really interesting things when you scale them up a lot and train them on a large amount of multimodal data.
So multimode was really interesting, but within like you work in adversarial examples. So selecting within.
Model within one mode of data, selecting better at what are the difficult cases from which are most useful to learn from?
Oh yeah. Could we could we get a whole lot of mileage out of designing a model that is resistant to adversarial examples or something like that?
Right. Yeah, question my thinking on that has evolved a lot over the last few years when I think when I first started to really invest in studying adversarial examples, I was thinking of it mostly as adversarial examples reveal a big problem with machine learning.
And we would like to close the gap between how machine learning models respond to adversarial examples and how humans respond after studying the problem more. I still think that adversarial examples are important. I think of them now more of as a security liability than as an issue that necessarily shows there is something uniquely wrong with machine learning as opposed to humans also.
Do you see them as a tool to improve the performance of the system? Not not on the security side, but literally just accuracy?
I do see them as a kind of tool on that side, but maybe not quite as much as I used to think. we have started to find that there is a tradeoff between accuracy and adversarial examples and accuracy on clean examples. Back in 2014, when I did the first adversarial trained classifier that showed resistance to some kinds of adversarial examples, it also got better at the clean data on amnesty. And that is something we have replicated several times and amnesty that when we train against weak adversarial examples, classifiers get more accurate.
So far, that has not really held up on other data sets and has not held up when we train against stronger adversaries. It seems like when you confront a really strong adversary, you tend to have to give something up. As you are saying, this is such a compelling idea because it feels it feels like that is how us humans learn the difficult cases.
We try to think of what would we screw up? And then we make sure we fix that. Yeah, it is also in a lot of branches of engineering. You do a worst case analysis and make sure that your system will work in the worst case and then that guarantees that it will work in all of the messy average cases that happen when you go out into a really randomized world.
Yet with driving with autonomous vehicles, there seems to be a desire to just look for think adversarial, to try to figure out how to mess up the system. And if you can be robust to all those difficult cases, then you can. it is a handwaving, empirical way to show that your system is.
Yeah, yeah.
To do most adversarial example, research is not really focused on a particular use case, but there are a lot of different use cases where you would like to make sure that the adversary can not interfere with the operation of your system. Like in finance, if you have an algorithm making trades for you, people go to a lot of an effort to obfuscate their algorithm that is both to protect their IP because you do not want to research and develop a profitable trading algorithm than have somebody else capture the gains.
But it is at least partly because you do not want people to make adversarial examples that fool your algorithm into making bad trades. Or I guess one area that is been popular in the academic literature is speech recognition. If you use speech recognition to hear an audio waveform and then turn that into a command that often executes for you, you do not want a malicious adversary to be able to produce audio that gets interpreted as malicious comments, especially if a human in the room does not realize that something like that is happening in speech recognition.
Has there been much success in being able to create adversarial examples that fool the system?
Yeah, actually, I guess the first work that I am aware of is a paper called Hidden Voice Commands that came out in twenty sixteen, I believe, and they were able to show that they could make sounds that are not understandable by a human but are recognized as the target phrase that the attacker wants the phone to recognize it is. Since then things have gotten a little bit better on the attackers side and worse on the defender side. it is become possible to make sounds that sound like normal speech, but are actually interpreted as a different sentence than the human hears, the level of susceptibility of the adversarial perturbation is still kind of high, that when you listen to the recording, it sounds like there is some noise in the background, just like rustling sounds.
But those rustling sounds are actually the adversarial perturbation that makes the phone here a completely different sentence.
Yeah, that is so fascinating. Peter Norvig mentioned that you are writing the Deep Learning chapter for the fourth edition of Artificial Intelligence, a modern approach book.
So how do you even begin summarizing the field of deep learning in a chapter?
Well, in my case, I waited like a year before I actually read anything. Is it even having written a full length textbook before, it is still a pretty intimidating to try to start writing just one chapter that covers everything. One thing that helped me make that plan was actually the experience of having written the full book before and then watching how the field changed after the book came out, I realized there is a lot of topics that were maybe extraneous in the first book and just seeing what stood the test of a few years of being published and what seems a little bit less important to have included now helped me pare down the topics I wanted to cover for the book.
it is also really nice to know that the field is kind of stabilized to the point where some core ideas from the 1980s are still used. Today, when I first started studying machine learning, almost everything from the 1980s had been rejected and now some of it has come back. So that stuff that is really stood the test of time is what I focused on putting into the book. There is also, I guess, two different philosophies about how you might write a book.
One philosophy as you try to write a reference that covers everything. And the other philosophy is you try to provide a high level summary that gives people the language to understand a field and tells them what the most important concepts are. The first deep learning book that I wrote with Joshua and Aaron was somewhere between that, the two philosophies that it is trying to be both a reference and an introductory guide. Writing this chapter for Russell Norvig book, I was able to focus more on just a concise introduction of the key concepts and the language.
You need to read about them more. And a lot of cases actually just write paragraphs that said here is a rapidly evolving area that you should pay attention to. it is it is pointless to try to tell you what the latest and best version of a, you know, learn to learn model is. Right. You know, I can I can point you to a paper that is recent right now, but there is not a whole lot of a reason to delve into exactly what is going on with the latest Learning to Learn approach or the latest module produced by Learning to Learn algorithm.
You should know that learning to learn is a thing and that it may very well be the source of the latest and greatest convolutional net or the current net module that you would want to use in your latest project. But there is not a lot of point in trying to summarize exactly which architecture in which learning approach got to which level of performance.
So you may be focused more on the basics of the methodology so far from back propagation to feed forward to the Kernell now was convolutional, that kind of thing.
Yeah, yeah.
So if I were to ask you, I remember I took algorithms and data structures. Algorithms, of course. And remember, the professor asked what is an algorithm and yelled at everybody in a good way that nobody was answering it correctly, everybody knew what the hell it was a graduate course, everyone knew what an algorithm was, but they were not able to answer it well. So let me ask you, in that same spirit, what is deep learning?
I would say deep learning is any kind of machine learning that involves learning parameters of more than one consecutive step. So that I mean, shallow learning is things where you learn a lot of operations that happen in parallel, you might have a system that makes multiple steps like you might have had designed feature extractors, but really only one step is learned. Deep learning is anything where you have multiple operations in sequence. And that includes the things that are really popular today, like convolutional networks and recurrent networks.
But it also includes some of the things that have died out, like bullets and machines where we were not using back propagation. Today, I hear a lot of people define deep learning as gradient descent applied to these differentiable functions. And I think that is a legitimate usage of the term. it is just different from the way that I use the term myself.
So what is an example of deep learning that is not gradient descent and differentiable functions in your I mean, not specifically perhaps, but more even looking into the future.
what is your thought about that space of approaches?
Yeah, so I tend to think of machine learning algorithms as decomposed into really three different pieces. there is the model, which can be something like a neural net or a bolson machine or a recurrent model.
And that basically just describes how do you take data and how do you take parameters and, you know, what function do you use to make a prediction given the data and the parameters? Another piece of the learning algorithm is the optimization algorithm or not. Every algorithm can be really described in terms of optimization. But what is the algorithm for updating the parameters or updating whatever the state of the network is? And then the the last part is the the data set, like how do you actually represent the world as it comes into your machine learning system?
So I think of deep learning as telling us something about what does the model look like? And basically to qualify as deep, I say that it just has to have multiple layers that can be multiple steps in a fit forward differentiable computation. That can be multiple layers in a graphical model. there is a lot of ways that you could satisfy me that something has multiple steps that are each parameterized separately. I think of gradient descent as being all about that other piece.
The how do you actually update the parameters piece so you can imagine having a deep model like a convolutional net and training it with something like evolution or a genetic algorithm. And I would say that still qualifies as deep learning. And then in terms of models that are not necessarily differentiable, I guess Boltzmann machines are probably the main example of something where you can not really take a derivative and use that for the learning process. But you can still argue that the model has many steps of processing, that it applies when you run inference in the model.
So the steps of processing, that is key. So Geoff Hinton suggests that we need to throw away back pop back propagation and start all over. What do you think about that? What could an alternative direction of training RealNetworks networks look like?
I do not know. The back propagation is going to go away entirely most of the time when we decide that a machine learning algorithm is not on the critical path to research for improving. The algorithm does not die. It just becomes used for some specialized set of things. Right. A lot of algorithms like logistic regression do not seem that exciting to A.I. researchers who are working on things like speech recognition or autonomous cars today. But there is still a lot of use for logistic regression and things like analyzing really noisy data in medicine and finance or making really rapid predictions and really time limited contexts.
So I think I think back propagation and gradient descent are allowed to stay, but they may not end up being everything that we need to get to real human level or super human AI.
Are you optimistic about us discovering, you know, back propagation has been around for a few decades.
So are you optimistic about us as a community being able to discover something better?
Yeah, I am. I think I think we likely will find something that works better. You could imagine things like having stacks of models where some of the lower level models predict parameters of the higher level models. And so at the top level, you are not learning in terms of literally calculating gradients, but just predicting how different values will perform. You can kind of see that already in some areas like Bayesian optimization, where you have a Gaussian process that predicts how well different parameter values will perform.
We already use those kinds of algorithms for things like hyper parameter optimization. And in general, we know a lot of things other than back up that work really well for specific problems. The main thing we have not found is. A way of taking one of these other back based algorithms and having it really advanced the state of the art on an eye level problem. Right.
But I would not be surprised if eventually we find that some of these algorithms that even the ones that already exist, not even necessarily new one, we might find some way of customizing one of these algorithms to do something really interesting at the level of cognition or or the the level of, I think one system that we really do not have working quite right yet is like short term memory. We have things like Elston's. they are called long short term memory. They still do not do quite what a human does with short term memory like gradient descent.
To learn a specific fact has to do multiple steps on that fact. Like if I I tell you, the meeting today is at three p.m. I do not need to say over and over again. it is at three p.m.. it is at three p.m.. it is at three p.m. it is at three p.m.. Right. For you to do a great step on each one. You just hear it once and you remember it. there is been some work on things like self attention and attention, like mechanisms like the neural Turing machine that can write to memory cells and update themselves with facts like that right away.
But I do not think we have really nailed it yet. And that is one area where I would imagine that new optimization algorithms are different ways of applying existing optimization algorithms could give us a way of just lightning fast updating the state of a machine learning system to contain a specific fact like that without needing need to have it presented over and over and over again.
So some of the success of symbolic systems in the 80s is they were able to assemble these kinds of facts better.
But there is a lot of expert input required and it is very limited in that sense.
Do you ever look back to that as something that will have to return to eventually sort of dust off the book from the shelf and think about how we build knowledge, representation, knowledge?
We really have to use graph searches and searches. Right. And like first order, logic and entailment and things like that kind of thing. Yeah, exactly.
In my particular line of work, which has mostly been machine learning, security and and also generative modeling, I have not usually found myself moving in that direction for generative models. I could see a little bit of it could be useful if you had something like a differentiable knowledge base or some other kind of knowledge base where it is possible for some of our fuzzier machine learning algorithms to interact with the knowledge base.
I mean, your network is kind of like that. it is a differentiable knowledge base of sorts. Yeah.
But if we had a really easy way of giving feedback to machine learning models, that would clearly help a lot with with generative models. And so you could imagine one way of getting there would be get a lot better at natural language processing, but another way of getting there would be take some kind of knowledge base and figure out a way for it to actually interact with a neural network, being able to have a chat with the neural network.
Yes, it is like one thing in generative models we see a lot today is you will get things like faces that are not symmetrical, like people that have two eyes that are different colors. And I mean, there are people with eyes that are different colors in real life, but not nearly as many of them as you tend to see in the machine learning generated data. So if you had either a knowledge base that could contain the fact people's faces are generally approximately symmetric and eye color is especially likely to be the same on both sides, being able to just inject that hint into the machine learning model without having to discover that itself after studying a lot of data would be a really useful feature.
I could see a lot of ways of getting there without bringing back some of the 1980s technology. But I also see some ways that you could imagine extending the 1980s technology to play nice with neural nets and have it help get there.
Awesome. So you talked about the story of you coming up with the idea of Gan's at a bar with some friends.
You were arguing that this, you know, Gan's would work genov, adversarial networks and the others did not think so.
Then you went home at midnight, cut it up and it worked. So if I was a friend of yours at the bar, I would also have doubts.
it is a really nice idea, but I am very skeptical that it would work. What was the basis of their skepticism? What was the basis of your intuition? Why it should work? I do not want to be someone who goes around promoting alcohol for the purposes of science, but in this case, I do actually think that drinking helped a little bit. When your inhibitions are lowered, you are more willing to try out things that you would not try out otherwise. So I.
I have noticed in general that I am less prone to shooting down some of my own ideas when I am when I have had a little bit to drink.
I think if I had had that idea at lunchtime, I probably would have thought it is harder to wonderful that you can not train a second neural net in the inner loop of the outer neural net.
That was basically my friend's objection, was that trying to train to neural nets at the same time would be too hard.
So it was more about the training process unless. So my skepticism would be, you know, I am sure you could train it, but the thing would converge to would not be able to generate anything reasonable and kind of reasonable realism.
Yeah.
So so part of what all of us were thinking about when we had this conversation was deep bolts and machines, which a lot of us in the lab, including me, were a big fan of deep bolts and machines at the time. They involved two separate processes running at the same time. One of them is called the positive phase, where you load data into the model and tell the model to make the data more likely. The other one is called the negative phase, where you draw samples from the model and tell the model to make those samples less likely in a deep bolson machine.
it is not trivial to generate a sample. You have to actually run an iterative process that gets better and better samples coming closer and closer to the distribution the model represents. So during the training process, you are always running these two systems at the same time, one that is updating the parameters of the model and another one that is trying to generate samples from the model.
And they worked really well and things like amnesty.
But a lot of us in the lab, including me, had tried to get the bolts and machines to scale past amnesty to things like generating color photos, and we just could not get the two processes to stay synchronized.
So when I had the idea for Gan's, a lot of people thought that the discriminator would have more or less the same problem as the negative phase in the Bolson machine that trying to train the discriminator in the inner loop. You just could not get it to keep up with the generator and the outer loop, and that would prevent it from converging to anything useful. Yeah, I share that intuition.
Yeah, but it turns out to not be the case.
A lot of the time with machine learning algorithms, it is really hard to predict ahead of time how well they will actually perform. You have to just run the experiment and see what happens. And I would say I still today do not have like one factor I can put my finger on and say this is why Gan's worked for photo generation and deep bolts and machines do not. There are a lot of theory papers showing that under some theoretical settings, the thuggin algorithm does actually converge.
Mm hmm. But those settings are restricted enough that they do not necessarily explain the whole picture in terms of all the results that we see in practice. So taking a step back, can you in the same way as we have talked about deep learning, can you tell me what generative adversarial networks are?
Yes. So generative adversarial networks are a particular kind of generative model. A generative model is a machine learning model that can train on some set of data like so you have a collection of photos of cats and you want to generate more photos of cats or you want to estimate a probability distribution over cats. So you can ask how likely it is that some new image is a photo of a cat. Ganzer One way of doing this, some genitive models are good at creating new data.
Other generative models are good at estimating that density function and telling you how likely particular pieces of data are to come from the same distribution as the training data. Gan's are more focused on generating samples rather than estimating the density function. There are some kinds of gown's like flow again that can do both, but mostly Ganzer about generating samples, generating new photos of cats that look realistic and they do that completely from scratch. it is analogous to human imagination when again creates a new image of a cat, it is using a neural network to produce a cat that has not existed before.
It is not doing something like compositing photos together. you are not you are not literally taking the eye off of one cat in the era of another cat. it is it is more of this digestive process where the the neural net trains on a lot of data and comes up with some representation of the probability distribution and generates entirely new cats. There are a lot of different ways of building a generative model. what is specific Tegan's is that we have a two player game in the game theoretic sense and as the players in this game compete, one of them becomes able to generate realistic data.
The first player is called the generator. It produces output data such as just images, for example. And at the start of the learning process, it will just produce completely random images. The other player is called the discriminator. The discriminator takes images as input and guesses whether they are real or fake. You train it both on real data. So photos that come from your training set actual photos of cats. And you try to to say that those are real.
You also train it on images that come from the generator network and you train it to say that those are fake. As the two players compete in this game, the discriminator tries to become better at recognizing whether images are real or fake, and the generator becomes better at fooling the discriminator into thinking that its outputs are real. And you can analyze this through the language of game theory and find that there is a Nash equilibrium where the generator has captured the correct probability distribution.
So in the cat example, it makes perfectly realistic catheters and the discriminator is unable to do better than random guessing because all the all the samples coming from both the data and the generator look equally likely to have come from either source.
So do you ever dare sit back and just blow your mind that this thing works so far? I am very so it is able to estimate the density function enough to generate generate realistic images.
I mean, does it. Yeah. Do you ever sit back? Yeah. How does this even why this is quite incredible, especially where against have gone in terms of realism.
Yeah. And not just to flatter my own work, but generative models, all of them have this property that if they really did what we asked them to do, they would do nothing but memorize the training data. Right. Models that are based on maximizing the likelihood the way that you obtain the maximum likelihood for a specific training set is you assign all of your probability mass to the training examples and nowhere else. For Gan's, the game is played using a training set.
So the way that you become unbeatable in the game is you literally memorize training examples.
One of my former interns wrote a paper. His name is Vaishnav Nugget Rajan, and he showed that it is actually hard for the generator to memorize the training data hard in a statistical learning theory sense that you can actually create reasons for why it would require quite a lot of learning steps and a lot of observations of of different variables before you could memorize the training data. That still does not really explain why when you produce samples that are new, why do you get compelling images rather than just garbage?
that is different from the training set. And I do not think we really have a good answer for that, especially if you think about how many possible images are out there and how few images the generative model sees during training. It seems just unreasonable that generative models create new images as well as they do, especially considering that we are basically training them to memorize rather than generalize. I think part of the answer is there is a paper called Deep Image Prior where they show that you can take a convolutional net and you do not even need to learn the parameters of it at all.
You just use the model architecture and it is already useful for things like painting images. I think that shows us that the convolutional network architecture captures something really important about the structure of images. And we do not need to actually use the learning to capture all the information coming out of the convolutional net.
That would that would imply that it would be much harder to make generative models in other domains. So far we are able to make reasonable speech models and things like that. But to be honest, we have not actually explored a whole lot of different data sets, all that much.
We do not, for example, see a lot of deep learning models of like biology datasets where you have lots of microarrays measuring the amount of different enzymes and things like that. So we may find that some of the progress that we have seen for images and speech turns out to really rely heavily on the model architecture. And we were able to do what we did for vision by trying to reverse engineer the human visual system. And maybe it will turn out that we can not just use that same trick for arbitrary kinds of data.
All right, so there is aspects of the human vision system, the hardware of it that makes it without learning, without cognition just makes it really effective at detecting the patterns we have seen the visual world. Yeah, that is yeah. that is really interesting.
What in a big quick overview in your in your view, what types of guns are there and what other generative models besides guns are there.
Yeah. So it is maybe a little bit easier to start with. What kinds of generative models are there other than guns. So most generative models are likelihood based where to train them. You have a model that tells you how how much probability it assigns to a particular example and you just maximize the probability assigned to all the training examples. It turns out that it is hard to design a model that can create really complicated images or really complicated audio waveforms and still have it be possible to estimate the the likelihood function from a computational point of view.
Most interesting models that you would just write down intuitively, it turns out that it is almost impossible to calculate the amount of probability they assigned to a particular point. So there is a few different schools of generative models in the likelihood family of one approach is to very carefully design the model so that it is computationally tractable to measure the density response to a particular point. So there are things like auto regressive models like Pixel, CNN, those basically break down the probability distribution into a product over every single feature.
So for an image, you estimate the probability of each pixel given all of the pixels that came before it. there is tricks where if you want to measure the density function, you can actually calculate the density for all these pixels, more or less in parallel, generating the image still tends to require you to go one pixel at a time, and that can be very slow. But there are again tricks for doing this.
In a hierarchical pattern where you can keep the runtime under control are the quality of the images it generates putting runtime aside pretty good?
Oh, they are reasonable. Yeah, I would say a lot of the best results are from Gan's these days, but it can be hard to tell how much of that is based on who is studying which type of algorithm, if that makes sense. The amount of effort invested in a PDA or like the kind of expertise. So a lot of people have traditionally been excited about graphics or art and things like that have gotten interested in Gan's. And to some extent it is hard to tell against doing better because they have a lot of graphics and are experts behind them or against doing better because they are more computationally efficient or are against doing better because they prioritize the realism of samples over the accuracy of the density function.
I think I think all of those are potentially valid explanations and it is it is hard to tell.
So can you give a brief history of Gan's from 2014 repaper 13? Yeah.
So a few highlights in the first paper we just showed that gown's basically work. If you look back at the samples we had now they look terrible on the Cifas 10 dataset. You can not even recognize objects in them. Your paper sorry. You see far 10. We use Imust, which is a little handwritten digits. We use the Toronto Face database, which is small grayscale photos of faces. We did have recognizable faces. My colleague Bing Sho put together the first Gann face model for that paper.
We also had the Cifas 10 dataset, which is things like very small, thirty two by thirty two pixels of of cars and cats and dogs of four that we did not get recognisable objects, but all the deep learning people back then, we are really used to looking at these failed samples and kind of reading them like tea leaves. And people who are used to reading the tea leaves recognize that our tea leaves at least look different, right? Maybe not necessarily better, but there is something unusual about them.
And that got a lot of us excited. One of the next really big steps was Lapkin by Emily Denton and Smith Chantler at Facebook II research, where they actually got really good high resolution photos working with Gance for the first time. They had a complicated system where they generated the image starting at low res and then scaling up to high res. But they were able to get it to work. And then in twenty fifteen, I believe, later that same year, Alec Radford and Smith Chinchilla and Luke Metz published the DC Again paper, which it stands for Deep Convolutional.
Again, it is kind of a non-unique name because these days basically all guns and even some before that were deep in convolutional, but they just kind of picked a name for a really great recipe where they were able to actually using only one model instead of a multistep process, actually generate realistic images of faces and things like that. That was sort of like the beginning of the Cambrian explosion of Gan's like, you know, once once you had animals that had a backbone, you suddenly got lots of different versions of of, you know, like fish and four legged animals and things like that.
So so DC again, became kind of the backbone for many different models that came out used as a baseline even still.
Yeah. Yeah. And so from there I would say some interesting things we have seen are there is a lot you can say about how just the quality of standard image generation Gans's increased. But what is also maybe more interesting on an intellectual level is how the things you can use Gown's for has also changed. One thing is that you can use them to learn classifiers without having to have class labels for every example in your your training set. So that is called Sevi Supervised Learning.
My colleague at Open A.I., Tim Salomon's, who is at Brain now wrote a paper called Improve Techniques for Training Gan's. I am a co-author on this paper, but I can not claim any credit for this particular part. One thing he showed in the paper is that you can take the Gand discriminator and use it as a classifier that actually tells you, you know, this image is a cat, this image is a dog. This image is a car. This image is a truck.
And so not just to say whether the image is real or fake, but if it is real to say specifically what kind of object it is.
And he found that you can train these classifiers with far fewer labeled examples than traditional classifiers.
So if you supervise based on also not just your discrimination ability, but your ability to classify, you are going to do much. you are going to converge much faster to being effective at being discriminator.
Yeah. So for for example, for the amnesty to say you want to look at an image of a handwritten digit and say whether it is a zero one or two and so on, to get down to less than one percent accuracy required around sixty thousand examples until maybe about twenty, fourteen or so in 2016. With this semi supervised garden project, Tim was able to get below one percent error, using only one hundred labeled examples. So that was about a six hundred X decrease in the amount of labels that he needed.
he is still using more images than that, but he does not need to have each of them labeled. As, you know, this one's a one. This one's a two, this one's a zero and so on.
Then to be able to for Gan's to be able to generate recognizable objects.
So object for a particular class, you still need label data because you need to know what it means to be a particular class cat dog.
How do you think we can move away from that?
Yeah, some researchers at Brain Zoric actually just released a really great paper on semi's supervised Gan's where their goal is not to classify, it is to make recognizable objects. Despite not having a lot of label data, they were working off of Deep Mines Begin project and they showed that they can match the performance of began using only 10 percent, I believe, of the of the labels. A big N was trained on the image net data set, which is about one point two million images, and had all of them labeled.
This latest project from brains are shows that they are able to get away with only having about 10 percent of the of the images labeled.
And they do that essentially using a clustering algorithm where the discriminator learns to assign the objects to groups and then this understanding that objects can be grouped into similar types helps it to form more realistic ideas of what should be appearing in the image, because it knows that every image it creates has to come from one of these archetypal groups rather than just being some arbitrary image.
If you are trying to get in with no class labels, you tend to get things that look sort of like grass or water or brick or dirt, but but without necessarily a lot going on in them. And I think that is partly because if you look at a large image net image, the object does not necessarily occupy the whole image. And so you learn to create realistic sets of pixels, but you do not necessarily learn that the object is the star of the show and you want it to be in every image you make.
Yeah, I have heard you talk about the the horse, the zebra cycle, again, mapping and how it turns out.
Again, thought-Provoking, that horses are usually on grass and zebras are usually on drier terrain. So when you are doing that kind of generation, you are going to end up generating greener horses or whatever.
Those are connected together. it is not just to be able to you are not able to segment. Yeah, it is generating the segment away.
So are there other types of games you come across in your mind so that neural networks can play with each other to. To to be able to solve problems, yeah, the the one that I spend most of my time on is in security. You can model most interactions is a game where there is attackers trying to break your system and you are the defender trying to build a resilient system. there is also domain adversarial learning, which is an approach to a domain adaptation that looks really a lot like Gan's.
The authors had the idea before the Green Paper came out that their paper came out a little bit later and they think they are very nice and cited the green paper.
But, you know, I know that they actually had the idea before it came out. Domain adaptation is when you want to train a machine learning model in one one setting called a domain and then deploy it in another domain later. And you would like it to perform well in the new domain, even though the new domain is different from how it was trained. So, for example, you might want to train on a really clean image data set like image net, but then deploy on user's phones where the user is taking pictures in the dark pictures while moving quickly and just pictures that are not really centered or composed all that well.
When you take a normal machine learning model, it often degrades really badly when you move to the new domain because it looks so different from what the model was trained on. Domain adaptation algorithms try to smooth out that gap, and the domain adversarial approach is based on training a feature extractor where the features have the same statistics, regardless of which domain you extracted them on. So in the domain adversarial game, you have one player that is a feature director and another player that is a domain recognizer.
The domain recognizer wants to look at the output of the feature extractor and guess which of the two domains the features came from. So it is a lot like the real versus fake discriminator. Incans and then the feature extractor you can think of as loosely analogous to the generator in Guinn's, except it is trying to do here is both for the domain recognizer and to not knowing which domain the data came from and also extract features that are good for classification. So at the end of the day, you can in in the cases where it works out, you can actually get features that work about the same in both domains.
Sometimes it has a drawback where in order to make things work the same in both domains, it just gets worse that the first one. But there are a lot of cases where it actually works out well on both.
Do you think of gas being useful in the context of documentation? Yeah.
One thing you could hope for with Guinn's is you could imagine I have got a limited training set and I would like to make more training data to train something else like a classifier. Right. You could train again on the training set and then create more data and then maybe the classifier would perform better on the test set after training on those bigger again generated data set. So that is the simplest version of of something you might hope would work. I have never heard of that particular approach working, but I think there is some there is some closely related things that that I think could work in the future and some of that actually already have worked.
So if you think a little bit about what we would be hoping for, if we use the gown to make more training data, we are hoping that the gown will generalize to new examples better than the classifier would have generalized if it was trained on the same dress. And I do not know of any reason to believe that the gown with General is better than the classifier would. But what we might hope for is that the gown could generalise differently from a specific classifier.
So one thing I think is worth trying. I have not personally tried, but someone could try is what if you trained a whole lot of different generative models on the same training set, create samples from all of them, and then train a classifier on that? Because each of the generative models might generalize in a slightly different way. They might capture many different axes, a variation that one individual model would not. And then the classifier can capture all of those ideas by training and all of their data.
So it would be a little bit like making an ensemble of classifiers. And I think a of Gan's. Yeah, in a way, I think that could generalize better. The other thing that Ganzer really good for is not necessarily generating new data. that is exactly like what you already have, but by generating new data that has different properties from the data you already had, one thing that you can do is you can create differentially private data. So suppose that you have something like medical records and you do not want to train a classifier on the medical records and then publish the classifier because someone might be able to reverse engineer some of the medical records you trained on.
there is a paper from Casey Greene's lab that shows how you can train again using differential privacy. And then the samples from the Guen still have the same differential privacy guarantees as the parameters of it. Again, so you can make a fake patient data for other researchers to use and they can do almost anything they want with that data because it does not come from real people. And the differential privacy mechanism gives you clear guarantees on how much the original people's data has been protected.
that is really interesting, actually.
I have not heard you talk about that before.
In terms of fairness, I have seen from your talk, how can an adversarial machine learning help models be more fair with respect to sensitive variables?
Yeah, so there is a paper from a Moustaki lab about how to learn machine learning models that are incapable of using specific variables. So to say, for example, you wanted to make predictions that are not affected by gender, it is not enough to just leave gender out of the input to the model. You can often infer gender from a lot of other characteristics, like say that you have the person's name, but you are not told their gender. Well, if if their name is Ian, they are kind of obviously a man.
So what you would like to do is make a machine learning model that can still take in a lot of different attributes and make it really accurate, informed prediction, but be confident that it is not reverse engineering, gender or another sensitive variable internally. You can do that using something very similar to the domain adversarial approach where you have one player that is a feature extractor and another player that is a feature analyzer, and you want to make sure that the feature analyser is not able to guess the value of the sensitive variable that you are trying to keep private.
Right.
that is yeah. I love this approach with the with the with the feature you are not able to infer.
Right.
The sensitive variables really is quite, quite brilliant and simple, actually.
Another way, I think the Gan's in particular could be used for fairness would be to make something like a cycle again, where you can take data from one domain and convert it into another. we have seen cycle again turning horses into Zebra's. we have seen other unsupervised gains made by Bengkulu, doing things like turning day photos into night photos. I think for fairness, you could imagine taking records for people in one group and transforming them into analagous people in another group and testing to see if they are they are treated equitably across those two groups.
there is a lot of things that be hard to get right to make sure that the conversion process itself is fair. And and I do not think it is anywhere near something that we could actually use yet. But if you could design that conversion process very carefully and might give you a way of doing audits where you say, what if we took people from this group, converted them into equivalent people in another group, does the system actually treat them how it ought to?
that is also really interesting, you know, in popular in popular press and in general in our imagination, you think, well, Gan's are able to generate data and you start to think about deep fakes or being able to sort of maliciously generate data that fakes the identity of other people.
Is this something of a concern to you or is this something if you look 10, 20 years into the future, is that something that pops up in your work, in the work of the committee that is working on January models?
I am a lot less concerned about 20 years from now than the next few years. I think there will be a kind of bumpy cultural transition as people encounter this idea that there can be very realistic videos and audio that are not real. I think 20 years from now, people will mostly understand that you should not believe something is real just because you saw video of it. People will expect to see that it is been cryptographically signed or have some other mechanism to make them believe that the content is real.
there is already people working on this, like there is a startup called Tropica that provides a lot of mechanisms for authenticating that an image is real there. There maybe not quite up to having a state actor tried to to evade their their verification techniques, but it is knowing that people are already working on it. I think we will get right eventually.
So you think authentication will Will eventually went out, so being able to authenticate it, this is real and this is not. Yeah.
As opposed to Gan's just getting better and better or generative models being able to get better and better to where the nature of what is real.
I do not think we will ever be able to look at the pixels of a photo and tell you for sure that it is real or not real. And I think it would actually be a somewhat dangerous to rely on that approach too much if you make a really good fake detector and then someone's able to fool your fake detector and your fake detector says this image is not fake, then it is even more credible than if you have never made a fake detector in the first place. What I do think we will get to is systems that we can kind of use behind the scenes for to make estimates of what is going on and maybe not like use them in court for a definitive analysis.
I also think we will likely get better authentication systems where, you know, imagine that every phone cryptographically signs everything that comes out of it. You were not able to conclusively tell that an image was real, but you would be able to tell somebody who knew the appropriate private key for this phone was actually able to sign this image and upload it to this server at this time stamp. Right. So you could imagine maybe you make phones that have the private keys hardware embedded in them.
If, like a state security agency really wants to infiltrate the company, they could probably plant a private key of their choice or break open the chip and learn the private key or something like that. But it would make it a lot harder for an adversary with fewer resources to fake things for most of us.
Yeah, OK, OK, so you mentioned the beer and the bar and the new ideas you were able to implement to come up with this new idea pretty quickly and implement it pretty quickly. Do you think there are still many such groundbreaking ideas and deep learning that could be developed so quickly?
Oh, yeah, I do think that there are a lot of ideas that can be developed really quickly. Guns were probably a little bit of an outlier on the whole, like one hour time scale, but just in terms of like low resource ideas where you do something really different on the algorithm scale and get a big payback, I think it is not as likely that you will see that in terms of things like core machine learning, technologies like a better classifier or a better reinforcement learning algorithm or a better generative model.
If I had the idea today, it would be a lot harder to prove that it was useful than it was back in twenty fourteen because I would need to get it running on something like Image Net or Salib a high resolution. You know, those take a while to train. You could not you could not train it in an hour and know that it was something really new and exciting. Back in twenty fourteen trading an amnesty was enough. But there are other areas of machine learning where I think a new idea could actually be developed really quickly with low resources.
what is your intuition about what areas the machine learning are ripe for this?
Yeah, so I think fairness and interpret ability are areas where we just really do not have any idea how anything should be done yet. Like for interprete ability, I do not think we even have the right definitions and even just defining a really useful concept, you do not even need to run any experiments could have a huge impact on the field. we have seen that, for example, in differential privacy, that Cynthia did work and her collaborators made this technical definition of privacy where before a lot of things are really mushy.
And then with that definition, you could actually design randomized algorithms for accessing databases and guarantee that they preserved individual people's privacy in a in like a mathematical quantitative sense. Right now, we all talk a lot about how interpretable different machine learning algorithms are, but it is really just people's opinion and everybody probably has a different idea of what interprete ability means in their head. If we could define some concept related to interpret ability that is actually measurable, that would be a huge leap forward, even without a new algorithm that increases that quantity.
And also, once once we had the definition of differential privacy, it was fast to get the algorithms that guaranteed it. So you could imagine once we have definitions of good concepts and interpret ability, we might be able to provide the algorithms that have the interoperability guarantees quickly to. What do you think?
It takes to build a system with human level intelligence as we quickly venture into the philosophical so artificial general intelligence, when you take I, I think that it definitely takes better environments than we currently have for training agents, that we want them to have a really wide diversity of experiences. I also think it is going to take really a lot of computation. it is hard to imagine exactly how much. So you are optimistic about simulation simulating a variety of environments?
Is the path forward as a necessary ingredient? Yeah, I, I do not think that we are going to get to artificial general intelligence by training on fixed data sets or by thinking really hard about the problem. I think that the the agent really needs to interact and have a variety of experiences within the same lifespan. And today we have many different models that can each do one thing and we tend to train them on one data set or one RL environment. Sometimes they are actually papers about getting one set of parameters to perform well in many different environments.
But we do not really have anything like an agent that goes seamlessly from one type of experience to another and and really integrates all the different things that it does over the course of its life. When we do see multi agent environments, they tend to be so many multi environment agents, they tend to be similar environments. Like all of them are playing like an action based video game where we do not really have an agent that goes from playing a video game to like reading The Wall Street Journal to predicting how effective a molecule will be as a drug or something like that.
What do you think is a good test for intelligence, in your view? it is been a lot of benchmarks.
Start with the with Alan Turing and natural conversation being good, being a good benchmark for intelligence.
What are what would be an Goodfellows sit back and be really damn impressed if a system was able to accomplish something that does not take a lot of glew from human engineers.
So imagine that instead of having to go to the CFR website and download Cifas 10 and then write a Python script to pass it and all that, you could just point an agent at the CFR ten problem and it downloads and extract the data and trends and model and starts giving you predictions. I feel like something that does not need to have every step of the pipeline assembled for it definitely understands what it is doing.
Is autosomal moving into that direction.
Are you thinking way even bigger autosomal has mostly been moving toward once we have built all the glue can the machine learning system to design the architecture really well. And so I am sort of saying like. If something knows how to pre-process the data so that it successfully accomplishes the task, then it would be very hard to argue that it does not truly understand the task in some fundamental sense. And I do not necessarily know that that is like the philosophical definition of intelligence, but that is something that be really cool to build.
That would be really useful and would impress me and would convince me that we have made a step forward in real A.I. So you give it like the URL for Wikipedia and then the next day expected to be able to solve Cifas 10 or like you type in a paragraph explaining what you want it to do and it figures out Web searches it should run and downloads all the all the necessary ingredients.
So you have a very clear, calm way of speaking. No ums, easy to edit. I have seen comments for both. You and I have been identified as both potentially being robots.
If you have to prove to the world that you are indeed human, how would you do it?
Well, I can understand thinking that I am a robot. The flip side, the Turing test, I think, yeah, yeah, the prove your human test intellectually, so you have to.
Is there something that is truly unique in your mind? Does it go back to just natural language?
Again, just being able to start proving proving that I am not a robot with today's technology? Yeah, that is pretty straightforward. Like, my conversation today has not veered off into, you know, talking about the stock market or something because of my training data. But I guess more generally, trying to prove that something is real from the content alone is incredibly hard.
that is one of the main things I have gotten out of my research that. You can simulate almost anything, and so you have to really step back to a separate channel to prove that something is real. So, like, I guess I should have had myself stepped on a block chain when I was born or something, but I did not do that, so I could not do my own research methodology. there is just no way to know at this point. So what? Last question.
Problem stands out for you that you are really excited about challenging in the near future.
So I think resistance to adversarial examples, figuring out how to make machine learning secure against an adversary who wants to interfere and control it is one of the most important things researchers today could solve in all domains image, language, driving.
And I guess I am most concerned about domains we have not really encountered yet. Like like imagine 20 years from now when we are using advanced A.I.S to do things we have not even thought of yet. Like if you ask people what are the important problems in security of phones in in like 2002, I do not think we would have anticipated that we are using them for, you know, nearly as many things as we are using them for today. I think it is going to be like that with A.I. that you can kind of try to speculate about where it is going.
But really, the business opportunities that end up taking off would be hard to predict ahead of time. Where you can predict ahead of time is that almost anything you can do with machine learning, you would like to make sure that people can not get it to do what they want rather than what you want, just by showing it a funny QR code or a funny input pattern. And you think that the set of methodology to do that can be bigger than any one domain.
And that is. I think so, yeah. Yeah. Like one methodology that I think is not it not a specific methodology, but like a category of solutions that I am excited about today is making dynamic models that change every time they make a prediction. So right now we tend to train models and then after they are trained, we freeze them and we just use the same rule to classify everything that comes in from then on. that is really a sitting duck.
From a security point of view, if you always output the same answer for the same input, then people can just run inputs through until they find a mistake that benefits them. And then they use the same mistake over and over and over again. I think having a model that updates its predictions so that it is harder to predict what you are going to get will make it harder for the for an adversary to really take control of the system and make it do what they want it to do.
The models that maintain a bit of a sense of mystery about them because they always keep changing. Yeah. And thanks so much for talking today. It was awesome. Thank you for coming in. it is great to see you.
